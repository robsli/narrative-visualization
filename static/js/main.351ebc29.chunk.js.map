{"version":3,"sources":["components/Header.js","constants.js","utils.js","components/Line.js","components/Lines.js","components/GameAnnotation.js","components/DataPoint.js","components/DataPoints.js","components/NarrativeAnnotations.js","narrativeAnnotations.js","components/Chart.js","components/Controls.js","components/Legend.js","components/Graph.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","href","teamNames","statSelectOptions","Object","entries","map","value","label","monthNames","maxDateOptions","playoffOrder","playoffIdentifiers","getStatAttribute","stat","datum","teamPostElo","teamPreRaptor","console","error","getMonthLabel","date","newDate","Date","year","getFullYear","month","getUTCMonth","getUniqueTeams","games","reduce","teams","game","team1","team2","newTeams","includes","push","concat","sort","Line","props","pathData","selectedTeam","team","updateSelectedTeam","isSelected","useState","isHovering","setIsHovering","labelX","setLabelX","labelY","setLabelY","useEffect","pathDataPoints","split","length","x","y","Number","fill","trim","d","strokeWidth","onClick","onMouseOver","onMouseLeave","transform","Lines","data","dataLineFunc","id","GameAnnotation","chartHeight","chartWidth","gameData","gRef","useRef","dx","dy","Math","min","max","teamScore","opponent","opponentScore","wins","losses","wonGame","annotations","note","title","bgPadding","color","makeAnnotations","annotation","editMode","type","annotationLabel","current","d3","call","ref","DataPoint","narrativeMode","scaleX","scaleY","onMouseEnter","cx","cy","r","DataPoints","NarrativeAnnotations","top","bottom","left","right","notePadding","regularSeasonAnnotations","playoffsAnnotations","playoffRound","dimensions","Chart","seasonDataByTeam","regularSeasonGames","playoffGames","maxDate","rawData","showOnlyPlayoffs","maxHeight","minWidth","margin","svgRef","bounds","setBounds","width","setWidth","height","setHeight","displayData","setDisplayData","narrativeAnnotationData","setNarrativeAnnotationData","setScaleX","setScaleY","setDataLineFunc","selectedLineData","setSelectedLineData","handleResize","newWidth","parentElement","clientWidth","newHeight","window","innerHeight","addEventListener","removeEventListener","newBounds","acc","elo1_pre","elo2_pre","elo1_post","elo2_post","raptor1_pre","raptor2_pre","eloMin","eloMax","raptorMin","raptorMax","getMetricBounds","newSvg","select","attr","dateRangeData","xDomain","lastDate","setDate","getDate","xScale","domain","range","xAxis","ticks","tickSize","remove","xAxisGroup","selectAll","yScale","getLower","val","getUpper","scoreMin","scoreMax","getChartBounds","yAxis","tickPadding","yAxisGroup","newDataLineFunc","gameWithHighestPostElo","values","highestEloGame","lastGame","filter","indexOf","find","isTeam1","score1","score2","teamData","selectedTeamData","orderedData","teamId","teamGames","Controls","selectedStat","teamOptions","updateMaxDate","updateNarrativeMode","updatePlayoffRound","updateSelectedStat","updateShowOnlyPlayoffs","onChange","target","disabled","prevMonthIndex","option","nextMonthIndex","Legend","Graph","setNarrativeMode","setSelectedStat","setSelectedTeam","setMaxDate","setShowOnlyPlayoffs","setPlayoffRound","seasonByTeam","setSeasonByTeam","setRegularSeasonGames","setPlayoffGames","allTeams","setAllTeams","playoffTeams","setPlayoffTeams","byTeam","keys","teamSeasonMetrics","teamAbbrev","endingMonth","showPlayoffs","season","playoff","gameStats","teamPreElo","teamRaptorProb","raptor_prob1","opponentPreElo","opponentPostElo","opponentPreRaptor","opponentRaptorProb","raptor_prob2","getTeamMetricsForSeason","rGames","pGames","uniqueTeams","uniquePlayoffTeams","newTeam","App","setData","setError","getData","file","a","csv","latestEloData","e","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.351ebc29.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => (\n    <header\n        className=\"w-full mx-auto mb-8 space-y-8\"\n    >\n        <h1 className=\"md:text-3xl lg:text-4xl py-8 text-xl text-center border-0 border-b border-gray-300 shadow\">2021 National Basketball Association Statistics</h1>\n\n        <section className=\"max-w-screen-2xl px-8 mx-auto space-y-4\">\n            <h2 className=\"text-2xl text-center text-gray-500 uppercase\">About</h2>\n            <div className=\"space-y-4 text-left\">\n                <p className=\"leading-7\">\n                    The visualization below provides a narrative of the 2021 NBA season in the form of two statistical measures commonly used for forecasting.\n                    The data used for this visualization is from FiveThirtyEight and is a subset of the data used to create their article{' '}\n                    <a\n                        className=\"hover:underline text-blue-500\"\n                        href=\"https://projects.fivethirtyeight.com/complete-history-of-the-nba/#bucks\"\n                    >The Complete History of the NBA <span className=\"text-xs\">(fivethirtyeight.com)</span></a>.\n                </p>\n                <p className=\"space-x-4 leading-8\">\n                    <span>\n                        <span>Data Source:</span>{' '}\n                        <a href=\"https://github.com/fivethirtyeight/data/tree/master/nba-forecasts\" className=\"hover:underline text-blue-500\">FiveThirtyEight</a>\n                        <span className=\"text-xs\">\n                            {' ['}\n                            <a href=\"https://projects.fivethirtyeight.com/nba-model/nba_elo.csv\" className=\"hover:underline text-blue-500\">Download CSV</a>\n                            {']'}\n                        </span>\n                    </span>\n                    <span>|</span>\n                    <span>\n                        <span>Elo:</span>{' '}\n                        <a\n                            className=\"hover:underline text-blue-500\"\n                            href=\"https://en.wikipedia.org/wiki/Elo_rating_system\"\n                        >Elo Rating System <span className=\"text-xs\">(wikipedia.com)</span></a>\n                    </span>\n                    <span>|</span>\n                    <span>\n                        <span>RAPTOR:</span>{' '}\n                        <a\n                            className=\"hover:underline text-blue-500\"\n                            href=\"https://fivethirtyeight.com/features/how-our-raptor-metric-works/\"\n                        >How Our RAPTOR Metric Works <span className=\"text-xs\">(wikipedia.com)</span></a>\n                    </span>\n                </p>\n                <p><span className=\"font-bold uppercase\">NOTE:</span>The narrative mode is best viewed on full screen as the annotations will become squished together and harder to read on smaller screens. The chart is responsive with a minimum screen width of 872px.</p>\n            </div>\n        </section>\n    </header>\n)\n\nexport default Header;\n","const NBA_ELO_CSV = 'https://projects.fivethirtyeight.com/nba-model/nba_elo.csv';\nconst NBA_ELO_LATEST_CSV = 'https://projects.fivethirtyeight.com/nba-model/nba_elo_latest.csv';\n\nconst teamNames = {\n    'ATL': 'Atlanta Hawks',\n    'BRK': 'Brooklyn Nets',\n    'BOS': 'Boston Celtics',\n    'CHO': 'Charlotte Hornets',\n    'CHI': 'Chicago Bulls',\n    'CLE': 'Cleveland Cavaliers',\n    'DAL': 'Dallas Mavericks',\n    'DEN': 'Denver Nuggets',\n    'DET': 'Detroit Pistons',\n    'GSW': 'Golden State Warriors',\n    'HOU': 'Houston Rockets',\n    'IND': 'Indiana Pacers',\n    'LAC': 'Los Angeles Clippers',\n    'LAL': 'Los Angeles Lakers',\n    'MEM': 'Memphis Grizzlies',\n    'MIA': 'Miami Heat',\n    'MIL': 'Milwaukee Bucks',\n    'MIN': 'Minnesota Timberwolves',\n    'NOP': 'New Orleans Pelicans',\n    'NYK': 'New York Knicks',\n    'OKC': 'Oklahoma City Thunder',\n    'ORL': 'Orlando Magic',\n    'PHI': 'Philadelphia 76ers',\n    'PHO': 'Phoenix Suns',\n    'POR': 'Portland Trail Blazers',\n    'SAC': 'Sacramento Kings',\n    'SAS': 'San Antonio Spurs',\n    'TOR': 'Toronto Raptors',\n    'UTA': 'Utah Jazz',\n    'WAS': 'Washington Wizards',\n};\n\nconst teamSelectOptions = Object.entries(teamNames).map(([id, fullName]) => (\n    { value: id, label: fullName }\n))\n\nconst statSelectOptions = [\n    { value: 'elo', label: 'ELO' },\n    { value: 'raptor', label: 'Raptor' },\n];\n\nconst monthNames = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December'\n];\n\nconst maxDateOptions = [\n    '2021-01',\n    '2021-02',\n    '2021-03',\n    '2021-04',\n    '2021-05',\n    '2021-06',\n];\n\nconst playoffOrder = ['p', 'q', 's', 'c', 'f'];\nconst playoffIdentifiers = {\n    'p': 'Play-In',\n    'q': 'Quarter Finals',\n    's': 'Semi Finals',\n    'c': 'Conference Finals',\n    'f': 'Finals'\n}\n\nexport {\n    monthNames,\n    NBA_ELO_CSV,\n    NBA_ELO_LATEST_CSV,\n    playoffIdentifiers,\n    playoffOrder,\n    statSelectOptions,\n    teamNames,\n    teamSelectOptions,\n    maxDateOptions,\n}\n","import { monthNames, playoffOrder } from './constants';\n\nconst getTeamMetricsForSeason = (\n    data,\n    teamAbbrev,\n    endingMonth = null,\n    showPlayoffs = false,\n    playoffRound = null,\n    season = '2021'\n) => {\n    return data.reduce((acc, game) => {\n        if (game.season !== season) {\n            return acc;\n        }\n\n        if (!showPlayoffs && game.playoff) {\n            return acc;\n        }\n\n        if (showPlayoffs\n            && (!game.playoff\n                || playoffOrder.indexOf(game.playoff) > playoffOrder.indexOf(playoffRound)\n            )\n        ) {\n            return acc;\n        }\n\n        if (!showPlayoffs && endingMonth && !!endingMonth) {\n            // ex. 2021-01\n            const endDate = new Date(endingMonth);\n            const gameDate = new Date(game.date);\n\n            if (endDate < gameDate) {\n                return acc;\n            }\n        }\n\n        const lastGame = acc.length > 0\n            ? acc[acc.length - 1]\n            : { wins: 0, losses: 0 };\n\n        if (game.team1 === teamAbbrev) {\n            const teamScore = Number(game.score1);\n            const opponentScore = Number(game.score2);\n\n            const gameStats = {\n                date: game.date,\n                playoff: game.playoff,\n                team: game.team1,\n                teamScore,\n                teamPreElo: game.elo1_pre,\n                teamPostElo: game.elo1_post,\n                teamPreRaptor: game.raptor1_pre,\n                teamRaptorProb: game.raptor_prob1,\n                opponent: game.team2,\n                opponentScore,\n                opponentPreElo: game.elo2_pre,\n                opponentPostElo: game.elo2_post,\n                opponentPreRaptor: game.raptor2_pre,\n                opponentRaptorProb: game.raptor_prob2,\n                wins: teamScore > opponentScore ? lastGame.wins + 1 : lastGame.wins,\n                losses: teamScore < opponentScore ? lastGame.losses + 1 : lastGame.losses,\n            }\n\n            return acc.concat(gameStats);\n        }\n\n        if (game.team2 === teamAbbrev) {\n            const teamScore = Number(game.score2);\n            const opponentScore = Number(game.score1);\n\n            const gameStats = {\n                date: game.date,\n                playoff: game.playoff,\n                team: game.team2,\n                teamScore,\n                teamPreElo: game.elo2_pre,\n                teamPostElo: game.elo2_post,\n                teamPreRaptor: game.raptor2_pre,\n                teamRaptorProb: game.raptor_prob2,\n                opponent: game.team1,\n                opponentScore,\n                opponentPreElo: game.elo1_pre,\n                opponentPostElo: game.elo1_post,\n                opponentPreRaptor: game.raptor1_pre,\n                opponentRaptorProb: game.raptor_prob1,\n                wins: teamScore > opponentScore ? lastGame.wins + 1 : lastGame.wins,\n                losses: teamScore < opponentScore ? lastGame.losses + 1 : lastGame.losses,\n            }\n\n            return acc.concat(gameStats);\n        }\n\n        return acc;\n    }, [])\n}\n\nconst getMetricBounds = (rawData) => {\n    return rawData.reduce((acc, game) => {\n        const {\n            elo1_pre,\n            elo2_pre,\n            elo1_post,\n            elo2_post,\n            raptor1_pre,\n            raptor2_pre,\n        } = game;\n\n        return {\n            eloMin: Math.min(acc.eloMin, elo1_pre, elo2_pre, elo1_post, elo2_post),\n            eloMax: Math.max(acc.eloMax, elo1_pre, elo2_pre, elo1_post, elo2_post),\n            raptorMin: Math.min(acc.raptorMin, raptor1_pre, raptor2_pre),\n            raptorMax: Math.max(acc.raptorMax, raptor1_pre, raptor2_pre),\n        }\n    }, {\n        eloMin: 99999,\n        eloMax: 0,\n        raptorMin: 99999,\n        raptorMax: 0,\n    })\n}\n\nconst getStatAttribute = (stat, datum) => {\n    switch (stat) {\n        case 'elo':\n            return datum.teamPostElo;\n        case 'raptor':\n            return datum.teamPreRaptor;\n        default:\n            console.error('Unrecognized statistic category:', stat);\n            return null\n    }\n}\n\nconst getMonthLabel = (date) => {\n    const newDate = new Date(date);\n\n    const year = newDate.getFullYear();\n    const month = monthNames[newDate.getUTCMonth()];\n\n    return `${month} ${year}`\n}\n\nconst getUniqueTeams = (games) => {\n    const uniqueTeams = games.reduce((teams, game) => {\n        const { team1, team2 } = game;\n        const newTeams = [];\n        if (!teams.includes(team1)) {\n            newTeams.push(team1);\n        }\n\n        if (!teams.includes(team2)) {\n            newTeams.push(team2);\n        }\n\n        return teams.concat(newTeams);\n    }, []);\n\n    return uniqueTeams.sort();\n}\n\nexport {\n    getMetricBounds,\n    getMonthLabel,\n    getUniqueTeams,\n    getStatAttribute,\n    getTeamMetricsForSeason,\n}\n","import React, { useEffect, useState } from 'react';\n\nconst Line = (props) => {\n    const {\n        pathData,\n        selectedTeam,\n        team,\n        updateSelectedTeam,\n    } = props;\n\n    const isSelected = team === selectedTeam;\n\n    const [isHovering, setIsHovering] = useState(false);\n\n    const [labelX, setLabelX] = useState();\n    const [labelY, setLabelY] = useState();\n\n    useEffect(() => {\n        if ((isSelected || isHovering)) {\n            const pathDataPoints = pathData.split('L');\n            const [x, y] = pathDataPoints[pathDataPoints.length - 1].split(',');\n\n            setLabelX(Number(x) + 12);\n            setLabelY(Number(y) + 6);\n        }\n    }, [isHovering, isSelected, pathData]);\n\n    return (\n        <>\n            <path\n                fill=\"none\"\n                className={`\n                    stroke-current cursor-pointer\n                    transition-all ease-in-out\n                    ${isSelected\n                        ? 'text-gray-600'\n                        : isHovering\n                            ? 'text-purple-500'\n                            : 'text-gray-200'}\n                `.trim()}\n                d={pathData}\n                strokeWidth={isSelected || isHovering ? 6 : 2}\n                onClick={() => updateSelectedTeam(team)}\n                onMouseOver={() => setIsHovering(true)}\n                onMouseLeave={() => setIsHovering(false)}\n            ></path>\n\n            {(isSelected || isHovering)\n                && labelX && labelY && (\n                    <text\n                        className={`\n                            text-base\n                            ${isSelected ? 'text-black' : 'text-purple-800'}\n                        `.trim()}\n                        transform={`translate(${labelX}, ${labelY})`}\n                    >{team}</text>\n                )\n            }\n        </>\n    )\n}\n\nexport default Line;\n","import React from 'react';\n\nimport Line from './Line';\n\nconst Lines = (props) => {\n    const {\n        data,\n        selectedTeam,\n        dataLineFunc,\n        updateSelectedTeam,\n    } = props;\n\n    return (\n        <g className=\"w-full h-full\" id=\"data-lines-wrapper\">\n            { data && data.map(({ team, games }) => (\n                games && games.length && (\n                    <Line\n                        key={`line-${team}`}\n                        pathData={dataLineFunc(games)}\n                        selectedTeam={selectedTeam}\n                        team={team}\n                        updateSelectedTeam={updateSelectedTeam}\n                    />\n                )\n            ))}\n        </g>\n    );\n}\n\nexport default Lines;\n","import React, { useEffect, useRef } from 'react';\n\nimport * as d3 from 'd3';\nimport { annotationLabel, annotation } from 'd3-svg-annotation';\n\nconst GameAnnotation = (props) => {\n    const {\n        chartHeight,\n        chartWidth,\n        x,\n        y,\n        gameData,\n    } = props;\n\n    const gRef = useRef();\n\n    const dx = (x + 200) < chartWidth\n        ? 50\n        : -50;\n    const dy = y < (chartHeight / 2)\n        ? Math.min(100, chartHeight - y - 40)\n        : Math.max(-100, - y + 40);\n\n    const { team, teamScore, opponent, opponentScore, wins, losses } = gameData || {};\n    const wonGame = teamScore > opponentScore;\n    const label = wonGame\n        ? `${team} improves to ${wins} - ${losses}`\n        : `${team} slides to ${wins} - ${losses}`\n\n    const annotations = [{\n        x, y, dy, dx,\n        note: {\n            label,\n            title: `${wonGame ? 'WIN against' : 'LOSS to'} ${opponent} (${teamScore} - ${opponentScore})`,\n            bgPadding: 20,\n        },\n        color: wonGame ? '#10B981' : '#EF4444',\n    }]\n\n    const makeAnnotations = annotation()\n        .editMode(true)\n        .type(annotationLabel)\n        .annotations(annotations);\n\n    useEffect(() => {\n        if (gRef && gRef.current) {\n            d3.select(gRef.current).call(makeAnnotations);\n        }\n    }, [makeAnnotations, gRef]);\n\n    return (\n        <g\n            id=\"annotations-wrapper\" className=\"annotation-group\"\n            ref={gRef}\n        />\n    );\n}\n\nexport default GameAnnotation;\n","import React, { useState } from 'react';\n\nimport { getStatAttribute } from '../utils';\nimport GameAnnotation from './GameAnnotation';\n\nconst DataPoint = (props) => {\n    const {\n        chartHeight,\n        chartWidth,\n        gameData,\n        narrativeMode,\n        scaleX,\n        scaleY,\n        stat,\n    } = props;\n\n    const x = scaleX(new Date(gameData.date));\n    const y = scaleY(getStatAttribute(stat, gameData));\n\n    const [isHovering, setIsHovering] = useState(false);\n\n    const wonGame = gameData.teamScore > gameData.opponentScore;\n\n    return (\n        <g\n            onMouseEnter={() => setIsHovering(true)}\n            onMouseLeave={() => setIsHovering(false)}\n        >\n            {isHovering && !narrativeMode && (\n                <GameAnnotation\n                    chartHeight={chartHeight}\n                    chartWidth={chartWidth}\n                    x={x}\n                    y={y}\n                    gameData={gameData}\n                />\n            )}\n\n            <circle\n                className={`${wonGame ? 'text-green-500' : 'text-red-500'} cursor-pointer fill-current animate-pulse`}\n                cx={x}\n                cy={y}\n                r={7}\n            ></circle>\n\n            <circle\n                className=\"text-white cursor-pointer fill-current\"\n                cx={x}\n                cy={y}\n                r={5}\n            ></circle>\n\n            { Number(gameData.teamScore) > Number(gameData.opponentScore) && (\n                <circle\n                    className={`${wonGame ? 'text-green-500' : 'text-red-500'} animate-pulse cursor-pointer fill-current`}\n                    cx={x}\n                    cy={y}\n                    r={3}\n                ></circle>\n            )}\n        </g>\n    )\n}\n\nexport default DataPoint;\n","import React from 'react';\n\nimport DataPoint from './DataPoint';\n\nconst DataPoints = (props) => {\n    const {\n        chartHeight,\n        chartWidth,\n        data,\n        narrativeMode,\n        scaleX,\n        scaleY,\n        stat,\n    } = props;\n\n    return (\n        <g className=\"w-full h-full\" id=\"data-points-wrapper\">\n            {data && data.map((game) => (\n                <DataPoint\n                    key={`game-data-${game.date}-${game.team}`}\n                    chartHeight={chartHeight}\n                    chartWidth={chartWidth}\n                    gameData={game}\n                    narrativeMode={narrativeMode}\n                    scaleX={scaleX}\n                    scaleY={scaleY}\n                    stat={stat}\n                />\n            ))}\n        </g>\n    )\n}\n\nexport default DataPoints;\n","import React, { useEffect, useRef } from 'react';\n\nimport * as d3 from 'd3';\nimport { annotationLabel, annotation } from 'd3-svg-annotation';\nimport { getStatAttribute } from '../utils';\n\nconst NarrativeAnnotations = (props) => {\n    const {\n        gameData,\n        scaleX,\n        scaleY,\n        stat,\n    } = props;\n\n    const gRef = useRef();\n\n    const annotations = gameData.map(game => {\n        const { date, title, label, dx, dy } = game;\n\n        return {\n            x: scaleX(new Date(date)),\n            y: scaleY(getStatAttribute(stat, game)),\n            dx,\n            dy,\n            note: { label, title, bgPadding: { top: 10, bottom: 10, left: 10, right: 10 } },\n            color: 'black'\n        }\n    });\n\n    const makeAnnotations = annotation()\n        .editMode(true)\n        .notePadding(15)\n        .type(annotationLabel)\n        .annotations(annotations);\n\n    useEffect(() => {\n        if (gRef && gRef.current) {\n            d3.select(gRef.current).call(makeAnnotations);\n        }\n    }, [makeAnnotations, gRef]);\n\n    return (\n        <g\n            id=\"annotations-wrapper\" className=\"annotation-group\"\n            ref={gRef}\n        />\n    );\n}\n\nexport default NarrativeAnnotations;\n","const regularSeasonAnnotations = [\n    {\n        // First: within first month of play, the LA Lakers are the dominant team in the league\n        team: 'LAL',\n        date: '2021-01-01',\n        title: 'Lakers Continue Dominance',\n        label: 'The LA Lakers picked off right where they left off after winning the championship last season.',\n        dx: 50,\n        dy: 200,\n    },\n    {\n        team: 'LAC',\n        date: '2021-01-31',\n        title: 'Clippers Raising',\n        label: 'The LA Clippers begins to show some promise, securing the best record in the league at 16-5.',\n        dx: -50,\n        dy: 50,\n    },\n    {\n        team: 'PHI',\n        date: '2021-02-03',\n        title: 'Sixers Atop the East',\n        label: 'After a 4 game winning stream, the Philadephia 76ers lead the Eastern Conference with a 16-6 record.',\n        dx: 100,\n        dy: 150,\n    },\n    {\n        // Utah Jazz: 20-1 run, best record in the league at 24-5\n        team: 'UTA',\n        date: '2021-02-17',\n        title: 'Utah Jazz Shine',\n        label: 'The Utah Jazz go on a 20-1 run to become the undisputed best team in the NBA early on in the season.',\n        dx: 20,\n        dy: 50,\n    },\n    {\n        team: 'DEN',\n        date: '2021-04-01',\n        title: 'Denver Rises to 4th in West',\n        label: 'Behind a MVP-season performance from Nikola Jovic, the Denver Nuggets surge into 4th place in the West.',\n        dx: -120,\n        dy: 50,\n    },\n    {\n        team: 'OKC',\n        date: '2021-04-13',\n        title: 'Thunder Continue Descent',\n        label: 'The Oklahoma City Thunder go on a 14-game losing streak. They would go on to only win 2 of their last 25 games.',\n        dx: -40,\n        dy: -40,\n    },\n    {\n        team: 'POR',\n        date: '2021-05-16',\n        title: 'Portland Bounces Back',\n        label: 'After a sliding to 32-18 in April, Portland wins 10 of its last 12 games to secure the 6th spot in the West and narrowly avoid the play-in.',\n        dx: -20,\n        dy: 180,\n    },\n    {\n        team: 'UTA',\n        date: '2021-05-16',\n        title: 'End of Regular Season',\n        label: 'The Utah Jazz finish the regular season with the best record in the NBA (52 - 20) and the first seed in the Western Conference.',\n        dx: -150,\n        dy: 30,\n    }\n];\n\nconst playoffsAnnotations = [\n    {\n        // 2021-05-22: First play-in tournament, Memphis Grizzlies upset 8th seed GSW to get into playoffs\n        team: 'MEM',\n        date: '2021-05-21',\n        playoffRound: 'p',\n        title: 'Memphis Grizzlies Make Playoffs',\n        label: 'In the first play-in tournament ever, the Memphis Grizzlies upset 8th seed Golden State Warriors and advance to the playoffs.',\n        dx: 50,\n        dy: 100,\n    },\n    {\n        // 2021-06-01: Brooklyn defeats Boston 4-1, emerging as favorites in the east\n        team: 'BRK',\n        date: '2021-06-01',\n        playoffRound: 'q',\n        title: 'Brooklyn Nets Dominant',\n        label: 'The Brooklyn Nets defeat Boston 4-1, emerging as the favorites in the East.',\n        dx: 25,\n        dy: 100,\n    },\n    {\n        // 2021-06-18: Utah Jazz lose 4 straight to Clippers, exit early\n        team: 'LAC',\n        date: '2021-06-18',\n        playoffRound: 's',\n        title: 'Clippers Upset Jazz',\n        label: \"The West's 1 seed Utah Jazz lose 4 straight to the LA Clippers and exit early from the playoffs.\",\n        dx: -120,\n        dy: 30,\n    },\n    {\n        // 2021-06-19: Bucks win a pivotal game 7 against the high powered Nets\n        team: 'MIL',\n        date: '2021-06-19',\n        playoffRound: 's',\n        title: 'Bucks Best Nets',\n        label: 'The Milwaukee Bucks overcome an injured Brooklyn Nets in 7 games.',\n        dx: -100,\n        dy: 250,\n    },\n    {\n        // 2021-06-20: Atlanta upset first seed 76ers in game 7\n        team: 'ATL',\n        date: '2021-06-20',\n        playoffRound: 's',\n        title: 'Atlanta Upsets 76ers',\n        label: 'The young Atlanta Hawks pull off a game 7 win against 1st seed Philadelphia 76ers.',\n        dx: 40,\n        dy: 280,\n    },\n    {\n        // 2021: Suns beat Clippers,\n        team: 'PHO',\n        date: '2021-06-30',\n        playoffRound: 'c',\n        title: 'Phoenix Cruises to Finals',\n        label: 'The Phoenix Suns take advantage of a key injury on the Clippers and deliver a convincing win to advance from the West.',\n        dx: -20,\n        dy: 150,\n    },\n    {\n        // 2021: Bucks beat Alanta 4-2,\n        team: 'MIL',\n        date: '2021-07-03',\n        playoffRound: 'c',\n        title: 'Bucks Advance to Finals',\n        label: 'The Milwaukee Bucks take care of business and beat the Hawks in 6 games.',\n        dx: 80,\n        dy: 100,\n    },\n    {\n        // 2021-07-08: Phoenix on a roll, looks to be heavy favorites for championship\n        team: 'PHO',\n        date: '2021-07-08',\n        playoffRound: 'f',\n        title: 'Phoenix Starts Strong',\n        label: 'The Phoenix Suns go up 2-0, taking a commanding lead in the NBA Finals.',\n        dx: 140,\n        dy: 200,\n    },\n    {\n        // 2021-07-20: Bucks cap off 4-0 run to win championships over suns\n        team: 'MIL',\n        date: '2021-07-20',\n        playoffRound: 'f',\n        title: 'Milwaukee Wins Championship',\n        label: 'The Milwaukee Bucks cap off a 4-0 run to win the 2021 NBA Championship over the Suns.',\n        dx: 80,\n        dy: 60,\n    }\n];\n\nexport {\n    regularSeasonAnnotations,\n    playoffsAnnotations,\n}\n","import React, { useEffect, useRef, useState } from 'react';\nimport * as d3 from 'd3';\n\nimport { getMetricBounds, getStatAttribute } from '../utils';\nimport Lines from './Lines';\nimport DataPoints from './DataPoints';\nimport NarrativeAnnotations from './NarrativeAnnotations';\n\nimport { regularSeasonAnnotations, playoffsAnnotations } from '../narrativeAnnotations';\nimport { playoffOrder } from '../constants';\n\nconst dimensions = {\n    maxHeight: 800,\n    minWidth: 800,\n    margin: 64,\n}\n\nconst getChartBounds = (stat, bounds) => {\n    const getLower = val => 0.99 * Number(val);\n    const getUpper = val => 1.02 * Number(val);\n\n    switch (stat) {\n        case 'elo':\n            return [getLower(bounds.eloMin), getUpper(bounds.eloMax)];\n        case 'raptor':\n            return [getLower(bounds.raptorMin), getUpper(bounds.raptorMax)];\n        case 'score':\n            return [getLower(bounds.scoreMin), getUpper(bounds.scoreMax)];\n        default:\n            console.error('No bounds found for stat:', stat);\n            return [0, 0]\n    }\n}\n\nconst Chart = (props) => {\n    const {\n        seasonDataByTeam,\n        regularSeasonGames,\n        playoffGames,\n        playoffRound,\n        maxDate,\n        narrativeMode,\n        rawData,\n        selectedTeam,\n        showOnlyPlayoffs,\n        stat,\n        updateSelectedTeam,\n    } = props;\n\n    const { maxHeight, minWidth, margin } = dimensions;\n\n    const svgRef = useRef();\n\n    const [bounds, setBounds] = useState({});\n    const [width, setWidth] = useState();\n    const [height, setHeight] = useState();\n    const [displayData, setDisplayData] = useState();\n    const [narrativeAnnotationData, setNarrativeAnnotationData] = useState();\n\n    const [scaleX, setScaleX] = useState(() => () => {});\n    const [scaleY, setScaleY] = useState(() => () => {});\n    const [dataLineFunc, setDataLineFunc] = useState(() => () => {});\n    const [selectedLineData, setSelectedLineData] = useState([]);\n\n    useEffect(() => {\n        const handleResize = () => {\n            if (svgRef && svgRef.current) {\n                const newWidth = Math.max(minWidth, svgRef.current.parentElement.clientWidth - margin)\n                const newHeight = Math.min(window.innerHeight, maxHeight, newWidth * 1.2);\n\n                setWidth(newWidth);\n                setHeight(newHeight);\n            }\n        }\n\n        if (!width && !height) {\n            handleResize();\n        }\n        window.addEventListener('resize', handleResize)\n\n        return () => {\n            window.removeEventListener('resize', handleResize);\n        }\n    }, [svgRef, margin, width, height, minWidth, maxHeight]);\n\n    useEffect(() => {\n        const newBounds = getMetricBounds(rawData);\n\n        setBounds(newBounds);\n    }, [rawData]);\n\n    useEffect(() => {\n        const svgEl = d3.select(svgRef.current);\n\n        // Get the root container\n        const newSvg = svgEl.select('#chart-wrapper')\n            .attr('transform', `translate(${margin}, 0)`);\n\n        // Add X grid lines with labels\n        const dateRangeData = showOnlyPlayoffs\n            ? playoffGames\n            : regularSeasonGames;\n\n        if (dateRangeData) {\n            const xDomain = d3.extent(dateRangeData, d => new Date(d.date));\n            const lastDate = xDomain[1].setDate(xDomain[1].getDate() + 10);\n            const xScale = d3.scaleTime()\n                .domain([xDomain[0], lastDate])\n                .range([0, width - margin]);\n            const xAxis = d3.axisBottom(xScale)\n                .ticks(d3.timeWeek, '\\'%y %b %d')\n                .tickSize(-height + margin);\n            newSvg.select('#x-axis').select('*').remove();\n            const xAxisGroup = newSvg.select('#x-axis')\n                .attr('transform', `translate(0, ${height - (2 * margin)})`)\n                .call(xAxis);\n            xAxisGroup.select('.domain')\n                .attr('class', '');\n            xAxisGroup.selectAll('line')\n                .attr('class', 'text-gray-200');\n            xAxisGroup.selectAll('text')\n                .attr('class', 'text-base text-gray-500 transform -rotate-90 text-right')\n                .attr('y', -6)\n                .attr('x', -margin + 10);\n\n            // Add Y grid lines with labels\n            const yScale = d3.scaleLinear()\n                .domain(getChartBounds(stat, bounds))\n                .range([height - margin , 0]);\n            const yAxis = d3.axisLeft(yScale)\n                .ticks(5)\n                .tickPadding(20)\n                .tickSize(-width + margin);\n            newSvg.select('#y-axis').select('*').remove();\n            const yAxisGroup = newSvg.select('#y-axis').call(yAxis);\n            yAxisGroup.select('.domain').remove();\n            yAxisGroup.selectAll('line')\n                .attr('class', 'text-gray-200');\n            yAxisGroup.selectAll('text')\n                .attr('class', 'text-base text-gray-800');\n\n            const newDataLineFunc = d3.line()\n                .x(d => xScale(new Date(d.date)))\n                .y(d => yScale(getStatAttribute(stat, d)));\n\n            setScaleX(() => xScale);\n            setScaleY(() => yScale);\n            setDataLineFunc(() => newDataLineFunc);\n        }\n\n    }, [bounds, height, width, margin, stat, showOnlyPlayoffs, playoffGames, regularSeasonGames]);\n\n    useEffect(() => {\n        if (narrativeMode && seasonDataByTeam) {\n            const gameWithHighestPostElo = Object.values(seasonDataByTeam).reduce((highestEloGame, games) => {\n                if (!games.length) {\n                    return highestEloGame;\n                }\n\n                const lastGame = games[games.length - 1];\n\n                return Number(lastGame.teamPostElo) > Number(highestEloGame.teamPostElo)\n                    ? lastGame\n                    : highestEloGame;\n            }, { teamPostElo: 0 });\n\n            if (gameWithHighestPostElo && gameWithHighestPostElo.team) {\n                updateSelectedTeam(gameWithHighestPostElo.team);\n            }\n\n            if (showOnlyPlayoffs) {\n                const annotations = playoffsAnnotations\n                    .filter(annotation => playoffOrder.indexOf(annotation.playoffRound) <= playoffOrder.indexOf(playoffRound))\n                    .map(annotation => {\n                        const gameData = playoffGames.find(game => {\n                            return game.date === annotation.date\n                                && (game.team1 === annotation.team\n                                    || game.team2 === annotation.team)\n                        })\n\n                        const isTeam1 = gameData.team1 === annotation.team;\n                        return {\n                            ...annotation,\n                            teamPostElo: isTeam1 ? gameData.elo1_post : gameData.elo2_post,\n                            teamPreRaptor: isTeam1 ? gameData.raptor1_pre : gameData.raptor2_pre,\n                            teamScore: isTeam1 ? gameData.score1 : gameData.score2,\n                            opponentScore: isTeam1 ? gameData.score2: gameData.score1,\n                        }\n                    });\n\n                setNarrativeAnnotationData(annotations);\n            } else {\n                const annotations = regularSeasonAnnotations\n                    .filter(annotation => (new Date(annotation.date)) <= (new Date(maxDate)))\n                    .map(annotation => {\n                        const gameData = regularSeasonGames.find(game => {\n                            return game.date === annotation.date\n                                && (game.team1 === annotation.team\n                                    || game.team2 === annotation.team)\n                        })\n\n                        const isTeam1 = gameData.team1 === annotation.team;\n                        return {\n                            ...annotation,\n                            teamPostElo: isTeam1 ? gameData.elo1_post : gameData.elo2_post,\n                            teamPreRaptor: isTeam1 ? gameData.raptor1_pre : gameData.raptor2_pre,\n                            teamScore: isTeam1 ? gameData.score1 : gameData.score2,\n                            opponentScore: isTeam1 ? gameData.score2: gameData.score1,\n                        }\n                    })\n\n                setNarrativeAnnotationData(annotations);\n            }\n        }\n    }, [rawData, narrativeMode, seasonDataByTeam, updateSelectedTeam, maxDate, showOnlyPlayoffs, playoffRound, playoffGames, regularSeasonGames])\n\n    useEffect(() => {\n        if (seasonDataByTeam) {\n            const { orderedData, selectedTeamData } = Object.entries(seasonDataByTeam).reduce(({ selectedTeamData, orderedData }, teamData) => {\n                const [teamId, teamGames] = teamData;\n\n                if (teamId === selectedTeam) {\n                    return { selectedTeamData: { team: teamId, games: teamGames }, orderedData }\n                } else {\n                    return { selectedTeamData, orderedData: orderedData.concat({ team: teamId, games: teamGames }) }\n                }\n            }, { selectedTeamData: null, orderedData: [] });\n\n            setSelectedLineData(selectedTeamData);\n            setDisplayData([...orderedData, selectedTeamData].filter(d => d));\n        }\n    }, [seasonDataByTeam, selectedTeam, narrativeMode]);\n\n    return (\n        <svg\n            className=\"w-full h-full max-h-screen transition-all ease-in-out\"\n            ref={svgRef}\n            width={width}\n            height={height && (height + margin)}\n        >\n            {width && height && (\n                <g id=\"chart-wrapper\">\n                    <g id=\"x-axis\" className=\"\"></g>\n                    <g id=\"y-axis\" className=\"\"></g>\n                    { displayData && (\n                        <g className=\"w-full h-full\">\n                            <Lines\n                                data={displayData}\n                                selectedTeam={selectedTeam}\n                                dataLineFunc={dataLineFunc}\n                                updateSelectedTeam={updateSelectedTeam}\n                            />\n\n                            {selectedLineData && (\n                                <DataPoints\n                                    chartHeight={height}\n                                    chartWidth={width}\n                                    data={narrativeMode ? narrativeAnnotationData : selectedLineData.games}\n                                    narrativeMode={narrativeMode}\n                                    scaleX={scaleX}\n                                    scaleY={scaleY}\n                                    stat={stat}\n                                />\n                            )}\n\n                            {narrativeMode && narrativeAnnotationData && (\n                                <NarrativeAnnotations\n                                    gameData={narrativeAnnotationData}\n                                    scaleX={scaleX}\n                                    scaleY={scaleY}\n                                    stat={stat}\n                                />\n                            )}\n                        </g>\n                    )}\n                </g>\n            )}\n        </svg>\n    )\n}\n\nexport default Chart;\n","import React from 'react';\n\nimport { statSelectOptions, teamNames, maxDateOptions } from '../constants';\n\nimport { getMonthLabel } from '../utils';\nimport { playoffOrder, playoffIdentifiers } from '../constants';\n\nconst Controls = (props) => {\n    const {\n        maxDate,\n        narrativeMode,\n        playoffRound,\n        selectedStat,\n        selectedTeam,\n        showOnlyPlayoffs,\n        teamOptions,\n        updateMaxDate,\n        updateNarrativeMode,\n        updatePlayoffRound,\n        updateSelectedStat,\n        updateSelectedTeam,\n        updateShowOnlyPlayoffs,\n    } = props;\n\n    const nextMonth = () => {\n        if (maxDateOptions.indexOf(maxDate) >= maxDateOptions.length - 1) {\n            updatePlayoffRound('p');\n            updateShowOnlyPlayoffs(true);\n        } else {\n            const nextMonthIndex = maxDateOptions.indexOf(maxDate) + 1;\n\n            updateMaxDate(maxDateOptions[nextMonthIndex]);\n        }\n    }\n\n    const prevMonth = () => {\n        const prevMonthIndex = maxDateOptions.indexOf(maxDate) - 1;\n\n        updateMaxDate(maxDateOptions[prevMonthIndex]);\n    }\n\n    const prevRound = () => {\n        if (playoffOrder.indexOf(playoffRound) === 0) {\n            updateMaxDate(maxDateOptions[maxDateOptions.length - 1]);\n            updateShowOnlyPlayoffs(false);\n        } else {\n            updatePlayoffRound(playoffOrder[playoffOrder.indexOf(playoffRound) - 1])\n        }\n    }\n\n    const nextRound = () => {\n        updatePlayoffRound(playoffOrder[playoffOrder.indexOf(playoffRound) + 1])\n    }\n\n    return (\n        <section className=\"lg:flex-row border-b-300 lg:space-y-0 flex flex-col w-full pb-4 space-y-4 border-0 border-b\">\n            <div className=\"lg:border-r lg:border-b-0 lg:pb-0 flex flex-col pb-4 pr-4 space-y-4 border-0 border-b border-gray-200\">\n                <label className=\"flex flex-col space-y-2\">\n                    <span className=\"text-sm font-medium text-gray-500 uppercase\">Visualization Mode</span>\n                    <button\n                        className=\"nowrap w-max-content flex overflow-hidden leading-tight text-gray-800 border rounded-full shadow-sm\"\n                        onClick={() => updateNarrativeMode(!narrativeMode)}\n                    >\n                        <span className={`block px-3 py-2 w-32 ${narrativeMode ? 'text-white bg-green-600 shadow' : 'bg-gray-100 text-gray-400 shadow-inner'}`}>Narrative</span>\n                        <span className={`block px-3 py-2 w-32 ${narrativeMode ? 'bg-gray-100 text-gray-400 shadow-inner' : 'text-white bg-green-600 shadow'}`}>Exploration</span>\n                    </button>\n                </label>\n                <dl className=\"flex flex-col space-y-4\">\n                    <div className=\"space-y-2\">\n                        <dt className=\"font-semibold\">Narrative Mode</dt>\n                        <dd className=\"\">Narrative Mode walks you through the story of the 2021 NBA regular season or playoffs.</dd>\n                    </div>\n                    <div className=\"space-y-2\">\n                        <dt className=\"font-semibold\">Exploration Mode</dt>\n                        <dd className=\"\">Exploration Mode allows you to explore the 2021 NBA season using Elo or Raptor statistics for any given team.</dd>\n                    </div>\n                </dl>\n\n                { !narrativeMode && (\n                    <>\n                        <div className=\"flex-nowrap flex items-center space-x-10\">\n                            <div className=\"w-20 h-0.5 bg-gray-300 hover:bg-purple-500 hover:h-1.5 cursor-pointer\"></div>\n                            <span>Hover over lines to see that team, click on line to select.</span>\n                        </div>\n                        <div className=\"flex-nowrap flex items-center space-x-10\">\n                            <div className=\"flex justify-around w-20\">\n                                <div className=\"flex items-center justify-center w-3.5 h-3.5 border-2 border-green-500 rounded-full animate-pulse cursor-pointer\">\n                                    <div className=\"animate-pulse w-1.5 h-1.5 bg-green-500 rounded-full\"></div>\n                                </div>\n                                <div className=\"flex items-center justify-center w-3.5 h-3.5 border-2 border-red-500 rounded-full cursor-pointer\"></div>\n                            </div>\n                            <span>Hover over data points to see more information about the game.</span>\n                        </div>\n                    </>\n                )}\n            </div>\n\n            <div className=\"w-96 md:text-sm lg:text-base flex flex-col flex-grow px-4 space-y-4 text-xs\">\n                <label className=\"flex flex-col space-y-2\">\n                    <span className=\"text-sm font-medium text-gray-500 uppercase\">Show Games From</span>\n                    <button\n                        className=\"nowrap w-max-content flex overflow-hidden leading-tight text-gray-800 border rounded-full shadow-sm\"\n                        onClick={() => updateShowOnlyPlayoffs(!showOnlyPlayoffs)}\n                    >\n                        <span className={`block px-3 py-2 lg:w-40 ${showOnlyPlayoffs ? 'bg-gray-100 text-gray-400 shadow-inner' : 'text-white bg-green-600 shadow'}`}>Regular Season</span>\n                        <span className={`block px-3 py-2 lg:w-40 ${showOnlyPlayoffs ? 'text-white bg-green-600 shadow' : 'bg-gray-100 text-gray-400 shadow-inner'}`}>Playoffs</span>\n                    </button>\n                </label>\n\n                <label className=\"lg:max-w-xs flex flex-col space-y-2\">\n                    <span className=\"text-sm font-medium text-gray-500 uppercase\">Statistic</span>\n                    <select\n                        id=\"statistic-select\"\n                        className=\"disabled:cursor-not-allowed px-3 py-2 leading-tight text-gray-800 border rounded shadow cursor-pointer\"\n                        onChange={({ target }) => updateSelectedStat(target.value)}\n                        value={selectedStat}\n                    >\n                        { statSelectOptions.map((team) => (\n                            <option key={team.value} value={team.value}>{team.label}</option>\n                        ))}\n                    </select>\n                </label>\n\n                {!narrativeMode && (\n                    <label className=\"flex flex-col space-y-2\">\n                        <span className=\"text-sm font-medium text-gray-500 uppercase\">Team</span>\n                        <select\n                            id=\"team-select\"\n                            className=\"disabled:cursor-not-allowed px-3 py-2 leading-tight text-gray-800 border rounded shadow\"\n                            onChange={({ target }) => updateSelectedTeam(target.value)}\n                            value={selectedTeam}\n                            disabled={narrativeMode}\n                        >\n                            <option value=''>All</option>\n                            { teamOptions.map((team) => (\n                                <option key={team} value={team}>{teamNames[team]}</option>\n                            ))}\n                        </select>\n                    </label>\n                )}\n\n                {/* Regular Season Date Selector */}\n                { !showOnlyPlayoffs && (\n                    <div className=\"lg:flex-nowrap lg:space-x-2 lg:space-y-0 lg:justify-start flex flex-wrap items-end justify-between space-y-2\">\n                        <button\n                            className=\"lg:order-1 disabled:cursor-not-allowed whitespace-nowrap disabled:text-gray-200 w-min hover:bg-green-500 disabled:bg-gray-300 order-2 px-3 py-2 leading-tight text-white transition-colors duration-100 bg-green-600 border rounded shadow\"\n                            disabled={maxDateOptions.indexOf(maxDate) <= 0}\n                            onClick={prevMonth}\n                        >{`< Prev`}</button>\n                        <label className=\"lg:order-2 lg:w-auto flex flex-col order-1 w-full space-y-2\">\n                            <span className=\"text-sm font-medium text-gray-500 uppercase\">Games Up To</span>\n                            <select\n                                id=\"month-select\"\n                                className=\"px-3 py-2 leading-tight text-gray-800 border rounded shadow\"\n                                onChange={({ target }) => updateMaxDate(target.value)}\n                                value={maxDate}\n                            >\n                                <option key=\"all-option\" value={maxDateOptions[maxDateOptions.length - 1]}>Regular Season</option>\n                                { maxDateOptions.map((option) => (\n                                    <option key={option} value={option}>{getMonthLabel(option)}</option>\n                                ))}\n                            </select>\n                        </label>\n                        <button\n                            className=\"disabled:cursor-not-allowed whitespace-nowrap disabled:text-gray-200 w-min hover:bg-green-500 disabled:bg-gray-300 order-3 px-3 py-2 leading-tight text-white transition-colors duration-100 bg-green-600 border rounded shadow\"\n                            disabled={!maxDate}\n                            onClick={nextMonth}\n                        >\n                            {maxDateOptions.indexOf(maxDate) >= maxDateOptions.length - 1\n                                ? 'Playoffs >'\n                                : 'Next >'\n                            }\n                        </button>\n                    </div>\n                )}\n\n                {/* Playoff Selector */}\n                { showOnlyPlayoffs && (\n                    <div className=\"flex-nowrap flex items-end space-x-2\">\n                        <button\n                            className=\"disabled:cursor-not-allowed disabled:text-gray-200 w-max-content hover:bg-green-500 disabled:bg-gray-300 px-3 py-2 leading-tight text-white transition-colors duration-100 bg-green-600 border rounded shadow\"\n                            onClick={prevRound}\n                        >\n                            { playoffOrder.indexOf(playoffRound) === 0\n                                ? '< Season'\n                                : '< Prev'\n                            }\n                        </button>\n                        <label className=\"flex flex-col space-y-2\">\n                            <span className=\"text-sm font-medium text-gray-500 uppercase\">Playoff Round</span>\n                            <select\n                                id=\"playoff-round-select\"\n                                className=\"w-48 px-3 py-2 leading-tight text-gray-800 border rounded shadow\"\n                                onChange={({ target }) => updatePlayoffRound(target.value)}\n                                value={playoffRound}\n                            >\n                                { playoffOrder.map((option) => (\n                                    <option key={option} value={option}>{playoffIdentifiers[option]}</option>\n                                ))}\n                            </select>\n                        </label>\n                        <button\n                            className=\"disabled:cursor-not-allowed disabled:text-gray-200 w-max-content hover:bg-green-500 disabled:bg-gray-300 px-3 py-2 leading-tight text-white transition-colors duration-100 bg-green-600 border rounded shadow\"\n                            disabled={playoffOrder.indexOf(playoffRound) >= playoffOrder.length - 1}\n                            onClick={nextRound}\n                        >{`Next >`}</button>\n                    </div>\n                )}\n            </div>\n        </section>\n    );\n}\n\nexport default Controls;\n","import React from 'react';\n\nconst Legend = ({ narrativeMode }) => (\n    <div className=\"flex justify-center w-full py-3\">\n        <div className=\"flex-nowrap flex space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n                <div className=\"flex items-center justify-center w-3.5 h-3.5 border-2 border-green-500 rounded-full animate-pulse\">\n                    <div className=\"animate-pulse w-1.5 h-1.5 bg-green-500 rounded-full\"></div>\n                </div>\n                <span>Win</span>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n                <div className=\"flex items-center justify-center w-3.5 h-3.5 border-2 border-red-500 rounded-full\">\n                </div>\n                <span>Loss</span>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n                <div className=\"w-10 h-1.5 bg-gray-700\">\n                </div>\n                <span>{ narrativeMode\n                    ? 'Team with highest statistic value as of selected timeframe'\n                    : 'Selected team'\n                }</span>\n            </div>\n        </div>\n    </div>\n)\n\nexport default Legend;\n","import React, { useEffect, useState } from 'react';\n\nimport { teamNames } from '../constants';\nimport { getTeamMetricsForSeason, getUniqueTeams } from '../utils';\nimport Chart from './Chart';\nimport Controls from './Controls';\nimport Legend from './Legend';\n\nconst Graph = (props) => {\n    const { data } = props;\n\n    // Controls State\n    const [narrativeMode, setNarrativeMode] = useState(true);\n    const [selectedStat, setSelectedStat] = useState('elo');\n    const [selectedTeam, setSelectedTeam] = useState('MIL');\n    const [maxDate, setMaxDate] = useState('2021-01');\n    const [showOnlyPlayoffs, setShowOnlyPlayoffs] = useState(false);\n    const [playoffRound, setPlayoffRound] = useState();\n\n    const [seasonByTeam, setSeasonByTeam] = useState();\n    const [regularSeasonGames, setRegularSeasonGames] = useState();\n    const [playoffGames, setPlayoffGames] = useState();\n    const [allTeams, setAllTeams] = useState([]);\n    const [playoffTeams, setPlayoffTeams] = useState([]);\n\n    useEffect(() => {\n        const byTeam = Object.keys(teamNames).reduce((acc, team) => {\n            const teamSeasonMetrics = getTeamMetricsForSeason(data, team, maxDate, showOnlyPlayoffs, playoffRound)\n            acc[team] = teamSeasonMetrics;\n\n            return acc;\n        }, {});\n\n        setSeasonByTeam(byTeam);\n    }, [data, maxDate, showOnlyPlayoffs, playoffRound]);\n\n    useEffect(() => {\n        const { rGames, pGames } = data.reduce((acc, game) => {\n            if (game.playoff) {\n                return {\n                    rGames: acc.rGames,\n                    pGames: acc.pGames.concat(game),\n                }\n            } else {\n                return {\n                    rGames: acc.rGames.concat(game),\n                    pGames: acc.pGames,\n                }\n            }\n        }, { rGames: [], pGames: [] });\n\n        setRegularSeasonGames(rGames);\n        setPlayoffGames(pGames);\n    }, [data]);\n\n    useEffect(() => {\n        if (regularSeasonGames) {\n            const uniqueTeams = getUniqueTeams(regularSeasonGames);\n            setAllTeams(uniqueTeams);\n        }\n\n        if (playoffGames) {\n            const uniquePlayoffTeams = getUniqueTeams(playoffGames);\n            setPlayoffTeams(uniquePlayoffTeams);\n        }\n\n    }, [regularSeasonGames, playoffGames]);\n\n    const updatePlayoffControls = (showPlayoffs) => {\n        setShowOnlyPlayoffs(showPlayoffs);\n        if (showPlayoffs) {\n            setPlayoffRound('p');\n        } else {\n            setPlayoffRound(null);\n        }\n    }\n\n    const updateNarrativeMode = (narrativeMode) => {\n        if (narrativeMode) {\n            setSelectedStat('elo');\n            setSelectedTeam('');\n            setShowOnlyPlayoffs(false);\n            setPlayoffRound(null);\n        }\n\n        setNarrativeMode(narrativeMode);\n    }\n\n    return (\n        <div className=\"max-w-screen-2xl flex flex-col items-center w-full p-8 mx-auto space-y-4 border rounded shadow\">\n            <Controls\n                maxDate={maxDate}\n                narrativeMode={narrativeMode}\n                playoffRound={playoffRound}\n                selectedStat={selectedStat}\n                selectedTeam={selectedTeam}\n                showOnlyPlayoffs={showOnlyPlayoffs}\n                teamOptions={showOnlyPlayoffs ? playoffTeams : allTeams}\n                updateMaxDate={setMaxDate}\n                updateNarrativeMode={updateNarrativeMode}\n                updatePlayoffRound={setPlayoffRound}\n                updateSelectedStat={setSelectedStat}\n                updateSelectedTeam={setSelectedTeam}\n                updateShowOnlyPlayoffs={updatePlayoffControls}\n            />\n\n            <Legend narrativeMode={narrativeMode} />\n\n            <Chart\n                rawData={data}\n                seasonDataByTeam={seasonByTeam}\n                regularSeasonGames={regularSeasonGames}\n                playoffGames={playoffGames}\n\n                showOnlyPlayoffs={showOnlyPlayoffs}\n                playoffRound={playoffRound}\n                maxDate={maxDate}\n                narrativeMode={narrativeMode}\n                stat={selectedStat}\n                selectedTeam={selectedTeam}\n                updateSelectedTeam={(newTeam) => setSelectedTeam(newTeam)}\n            />\n        </div>\n    );\n}\n\nexport default Graph;\n","import React, { useState, useEffect } from 'react';\nimport { csv } from 'd3';\n\nimport Header from './components/Header';\nimport { NBA_ELO_LATEST_CSV } from './constants';\n\nimport Graph from './components/Graph';\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [error, setError] = useState();\n\n  const getData = async (file) => {\n    const latestEloData = await csv(file);\n\n    setData(latestEloData);\n  }\n\n  useEffect(() => {\n    try {\n      getData(NBA_ELO_LATEST_CSV);\n    } catch (e) {\n      console.error(e);\n      setError(e);\n    }\n  }, []);\n\n  return (\n    <>\n      <Header />\n      <main className=\"md:px-4 lg:px-8 w-full px-2 pb-8 mx-auto\">\n        <section className=\"\">\n          { error && (\n            <div>There was an error loading the data</div>\n          )}\n\n          {!error && data.length && (\n            <Graph data={data} />\n          )}\n        </section>\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}