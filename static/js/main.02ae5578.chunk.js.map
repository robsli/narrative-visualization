{"version":3,"sources":["components/Header.js","components/Nav.js","constants.js","utils.js","components/Controls.js","components/Line.js","components/Lines.js","components/DataPoints.js","components/Chart.js","components/Graph.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","className","Nav","teamNames","teamSelectOptions","Object","entries","map","value","label","statSelectOptions","monthNames","maxDateOptions","getStatAttribute","stat","datum","teamPreElo","teamPreRaptor","teamScore","console","error","getMonthLabel","date","newDate","Date","year","getFullYear","month","getUTCMonth","Controls","selectedStat","selectedTeam","maxDate","updateSelectedStat","updateSelectedTeam","updateMaxDate","id","onChange","target","team","disabled","indexOf","onClick","prevMonthIndex","option","length","nextMonthIndex","Line","pathData","useState","isHovering","setIsHovering","isSelected","fill","d","strokeWidth","onMouseOver","onMouseLeave","Lines","data","dataLineFunc","games","DataPoints","scaleX","scaleY","game","cx","cy","r","opponentScore","dimensions","Chart","rawData","height","margin","svgRef","useRef","bounds","setBounds","width","setWidth","displayData","setDisplayData","setScaleX","setScaleY","setDataLineFunc","selectedLineData","setSelectedLineData","useEffect","current","parentElement","clientWidth","newBounds","reduce","acc","elo1_pre","elo2_pre","elo1_post","elo2_post","raptor1_pre","raptor2_pre","score1","score2","eloMin","Math","min","eloMax","max","raptorMin","raptorMax","scoreMin","scoreMax","getMetricBounds","newSvg","d3","select","attr","xScale","domain","range","xAxis","ticks","tickSize","remove","xAxisGroup","call","selectAll","yScale","getLower","val","Number","getUpper","getChartBounds","yAxis","tickPadding","yAxisGroup","newDataLineFunc","x","y","teamData","selectedTeamData","orderedData","teamId","teamGames","concat","ref","Graph","setSelectedStat","setSelectedTeam","setMaxDate","seasonByTeam","setSeasonByTeam","byTeam","keys","teamSeasonMetrics","teamAbbrev","endingMonth","season","lastGame","wins","loses","team1","gameStats","playoff","teamPostElo","teamRaptorProb","raptor_prob1","opponent","team2","opponentPreElo","opponentPostElo","opponentPreRaptor","opponentRaptorProb","raptor_prob2","getTeamMetricsForSeason","newTeam","App","setData","setError","getData","file","a","csv","latestEloData","e","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.02ae5578.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = (props) => {\n    return (\n        <header\n            className=\"w-full px-3 py-2\"\n        >\n            Header\n        </header>\n    )\n}\n\nexport default Header;\n","import React from 'react';\n\nconst Nav = (props) => {\n    return (\n        <nav></nav>\n    )\n}\n\nexport default Nav;\n","const NBA_ELO_CSV = 'https://projects.fivethirtyeight.com/nba-model/nba_elo.csv';\nconst NBA_ELO_LATEST_CSV = 'https://projects.fivethirtyeight.com/nba-model/nba_elo_latest.csv';\n\nconst teamNames = {\n    'ATL': 'Atlanta Hawks',\n    'BRK': 'Brooklyn Nets',\n    'BOS': 'Boston Celtics',\n    'CHO': 'Charlotte Hornets',\n    'CHI': 'Chicago Bulls',\n    'CLE': 'Cleveland Cavaliers',\n    'DAL': 'Dallas Mavericks',\n    'DEN': 'Denver Nuggets',\n    'DET': 'Detroit Pistons',\n    'GSW': 'Golden State Warriors',\n    'HOU': 'Houston Rockets',\n    'IND': 'Indiana Pacers',\n    'LAC': 'Los Angeles Clippers',\n    'LAL': 'Los Angeles Lakers',\n    'MEM': 'Memphis Grizzlies',\n    'MIA': 'Miami Heat',\n    'MIL': 'Milwaukee Bucks',\n    'MIN': 'Minnesota Timberwolves',\n    'NOP': 'New Orleans Pelicans',\n    'NYK': 'New York Knicks',\n    'OKC': 'Oklahoma City Thunder',\n    'ORL': 'Orlando Magic',\n    'PHI': 'Philadelphia 76ers',\n    'PHO': 'Phoenix Suns',\n    'POR': 'Portland Trail Blazers',\n    'SAC': 'Sacramento Kings',\n    'SAS': 'San Antonio Spurs',\n    'TOR': 'Toronto Raptors',\n    'UTA': 'Utah Jazz',\n    'WAS': 'Washington Wizards',\n};\n\nconst teamSelectOptions = Object.entries(teamNames).map(([id, fullName]) => (\n    { value: id, label: fullName }\n))\n\nconst statSelectOptions = [\n    { value: 'elo', label: 'ELO' },\n    { value: 'raptor', label: 'Raptor' },\n    { value: 'score', label: 'Score' },\n];\n\nconst monthNames = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December'\n];\n\nconst maxDateOptions = [\n    '2021-01',\n    '2021-02',\n    '2021-03',\n    '2021-04',\n    '2021-05',\n    '2021-06',\n    '2021-07',\n    '2021-08',\n];\n\nconst playoffIdentifiers = {\n    'p': 'Play-In',\n    'q': 'Quarter Finals',\n    's': 'Semi Finals',\n    'c': 'Conference Finals',\n    'f': 'Finals'\n}\n\nexport {\n    monthNames,\n    NBA_ELO_CSV,\n    NBA_ELO_LATEST_CSV,\n    playoffIdentifiers,\n    statSelectOptions,\n    teamNames,\n    teamSelectOptions,\n    maxDateOptions,\n}\n","import { monthNames } from './constants';\n\nconst getTeamMetricsForSeason = (data, teamAbbrev, endingMonth = null, season = '2021') => {\n    return data.reduce((acc, game) => {\n        if (game.season !== season) {\n            return acc;\n        }\n\n        if (endingMonth && !!endingMonth) {\n            // ex. 2021-01\n            const endDate = new Date(endingMonth);\n            const gameDate = new Date(game.date);\n\n            if (endDate < gameDate) {\n                return acc;\n            }\n        }\n\n        const lastGame = acc[acc.length - 1] || { wins: 0, loses: 0 };\n\n        if (game.team1 === teamAbbrev) {\n            const gameStats = {\n                date: game.date,\n                playoff: game.playoff,\n                teamScore: game.score1,\n                teamPreElo: game.elo1_pre,\n                teamPostElo: game.elo1_post,\n                teamPreRaptor: game.raptor1_pre,\n                teamRaptorProb: game.raptor_prob1,\n                opponent: game.team2,\n                opponentScore: game.score2,\n                opponentPreElo: game.elo2_pre,\n                opponentPostElo: game.elo2_post,\n                opponentPreRaptor: game.raptor2_pre,\n                opponentRaptorProb: game.raptor_prob2,\n                wins: game.score1 > game.score2 ? lastGame.wins + 1 : lastGame.wins,\n                loses: game.score1 < game.score2 ? lastGame.loses + 1 : lastGame.loses,\n            }\n\n            return acc.concat(gameStats);\n        }\n\n        if (game.team2 === teamAbbrev) {\n            const gameStats = {\n                date: game.date,\n                playoff: game.playoff,\n                teamScore: game.score2,\n                teamPreElo: game.elo2_pre,\n                teamPostElo: game.elo2_post,\n                teamPreRaptor: game.raptor2_pre,\n                teamRaptorProb: game.raptor_prob2,\n                opponent: game.team1,\n                opponentScore: game.score1,\n                opponentPreElo: game.elo1_pre,\n                opponentPostElo: game.elo1_post,\n                opponentPreRaptor: game.raptor1_pre,\n                opponentRaptorProb: game.raptor_prob1,\n                wins: game.score2 > game.score1 ? lastGame.wins + 1 : lastGame.wins,\n                loses: game.score2 < game.score1 ? lastGame.loses + 1 : lastGame.loses,\n            }\n\n            return acc.concat(gameStats);\n        }\n\n        return acc;\n    }, [])\n}\n\nconst getMetricBounds = (rawData) => {\n    return rawData.reduce((acc, game) => {\n        const {\n            elo1_pre,\n            elo2_pre,\n            elo1_post,\n            elo2_post,\n            raptor1_pre,\n            raptor2_pre,\n            score1,\n            score2\n        } = game;\n\n        return {\n            eloMin: Math.min(acc.eloMin, elo1_pre, elo2_pre, elo1_post, elo2_post),\n            eloMax: Math.max(acc.eloMax, elo1_pre, elo2_pre, elo1_post, elo2_post),\n            raptorMin: Math.min(acc.raptorMin, raptor1_pre, raptor2_pre),\n            raptorMax: Math.max(acc.raptorMax, raptor1_pre, raptor2_pre),\n            scoreMin: Math.min(acc.scoreMin, score1, score2),\n            scoreMax: Math.max(acc.scoreMax, score1, score2),\n        }\n    }, {\n        eloMin: 99999,\n        eloMax: 0,\n        raptorMin: 99999,\n        raptorMax: 0,\n        scoreMin: 99999,\n        scoreMax: 0,\n    })\n}\n\nconst getTeamMetricBounds = (rawData) => {\n    return rawData.reduce((acc, game) => {\n        const {\n            teamPreElo,\n            teamPostElo,\n            teamPreRaptor,\n            teamScore,\n        } = game;\n\n        return {\n            eloMin: Math.min(acc.eloMin, teamPreElo, teamPostElo),\n            eloMax: Math.max(acc.eloMax, teamPreElo, teamPostElo),\n            raptorMin: Math.min(acc.raptorMin, teamPreRaptor),\n            raptorMax: Math.max(acc.raptorMax, teamPreRaptor),\n            scoreMin: Math.min(acc.scoreMin, teamScore),\n            scoreMax: Math.max(acc.scoreMax, teamScore),\n        }\n    }, {\n        eloMin: 99999,\n        eloMax: 0,\n        raptorMin: 99999,\n        raptorMax: 0,\n        scoreMin: 99999,\n        scoreMax: 0,\n    })\n}\n\nconst getStatAttribute = (stat, datum) => {\n    switch (stat) {\n        case 'elo':\n            return datum.teamPreElo;\n        case 'raptor':\n            return datum.teamPreRaptor;\n        case 'score':\n            return datum.teamScore;\n        default:\n            console.error('Unrecognized statistic category:', stat);\n            return null\n    }\n}\n\nconst getMonthLabel = (date) => {\n    const newDate = new Date(date);\n\n    const year = newDate.getFullYear();\n    const month = monthNames[newDate.getUTCMonth()];\n\n    return `${month} ${year}`\n}\n\nexport {\n    getMetricBounds,\n    getMonthLabel,\n    getStatAttribute,\n    getTeamMetricBounds,\n    getTeamMetricsForSeason,\n}\n","import React, { useEffect, useState } from'react';\n\nimport { statSelectOptions, teamSelectOptions, maxDateOptions } from '../constants';\n\nimport { getMonthLabel } from '../utils';\n\nconst Controls = (props) => {\n    const {\n        selectedStat,\n        selectedTeam,\n        maxDate,\n        updateSelectedStat,\n        updateSelectedTeam,\n        updateMaxDate,\n    } = props;\n\n    const nextMonth = () => {\n        const nextMonthIndex = maxDateOptions.indexOf(maxDate) + 1;\n\n        updateMaxDate(maxDateOptions[nextMonthIndex]);\n    }\n\n    const prevMonth = () => {\n        const prevMonthIndex = maxDateOptions.indexOf(maxDate) - 1;\n\n        updateMaxDate(maxDateOptions[prevMonthIndex]);\n    }\n\n    return (\n        <div className=\"flex-nowrap flex items-end w-full space-x-12\">\n            <div className=\"flex-nowrap flex space-x-4\">\n                <label className=\"flex flex-col space-y-2\">\n                    <span className=\"text-sm font-medium text-gray-500 uppercase\">Statistic</span>\n                    <select\n                        id=\"statistic-select\"\n                        className=\"px-3 py-2 leading-tight text-gray-800 border rounded shadow appearance-none\"\n                        onChange={({ target }) => updateSelectedStat(target.value)}\n                        value={selectedStat}\n                    >\n                        { statSelectOptions.map((team) => (\n                            <option key={team.value} value={team.value}>{team.label}</option>\n                        ))}\n                    </select>\n                </label>\n\n                <label className=\"flex flex-col space-y-2\">\n                    <span className=\"text-sm font-medium text-gray-500 uppercase\">Team</span>\n                    <select\n                        id=\"team-select\"\n                        className=\"px-3 py-2 leading-tight text-gray-800 border rounded shadow\"\n                        onChange={({ target }) => updateSelectedTeam(target.value)}\n                        value={selectedTeam}\n                    >\n                        <option value='all'>All</option>\n                        { teamSelectOptions.map((team) => (\n                            <option key={team.value} value={team.value}>{team.label}</option>\n                        ))}\n                    </select>\n                </label>\n            </div>\n\n            <div className=\"flex-nowrap flex items-end ml-8 space-x-2\">\n                <button\n                    className=\"disabled:cursor-not-allowed disabled:text-gray-200 h-max-content px-3 py-2 leading-tight text-gray-800 border rounded shadow\"\n                    disabled={maxDateOptions.indexOf(maxDate) <= 0}\n                    onClick={prevMonth}\n                >{`<`}</button>\n                <label className=\"flex flex-col space-y-2\">\n                    <span className=\"text-sm font-medium text-gray-500 uppercase\">Max Date</span>\n                    <select\n                        id=\"statistic-select\"\n                        className=\"px-3 py-2 leading-tight text-gray-800 border rounded shadow\"\n                        onChange={({ target }) => updateMaxDate(target.value)}\n                        value={maxDate}\n                    >\n                        <option key=\"all-option\" value=''>All</option>\n                        { maxDateOptions.map((option) => (\n                            <option key={option} value={option}>{getMonthLabel(option)}</option>\n                        ))}\n                    </select>\n                </label>\n                <button\n                    className=\"disabled:text-gray-200 disabled:cursor-not-allowed h-max-content px-3 py-2 leading-tight text-gray-800 border rounded shadow\"\n                    disabled={!maxDate || maxDateOptions.indexOf(maxDate) >= maxDateOptions.length - 1}\n                    onClick={nextMonth}\n                >{`>`}</button>\n            </div>\n        </div>\n    );\n}\n\nexport default Controls;\n","import React, { useState } from 'react';\n\nconst Line = (props) => {\n    const {\n        pathData,\n        selectedTeam,\n        team,\n        updateSelectedTeam,\n    } = props;\n\n    const [isHovering, setIsHovering] = useState(false);\n\n    const isSelected = team === selectedTeam;\n\n    return (\n        <path\n            fill=\"none\"\n            className={`\n                stroke-current cursor-pointer\n                transition-all ease-in-out\n                ${isSelected\n                    ? 'text-gray-600'\n                    : isHovering\n                        ? 'text-purple-500'\n                        : 'text-gray-200'}\n            `}\n            d={pathData}\n            strokeWidth={isSelected || isHovering ? 6 : 2}\n            onClick={() => updateSelectedTeam(team)}\n            onMouseOver={() => setIsHovering(true)}\n            onMouseLeave={() => setIsHovering(false)}\n        ></path>\n    )\n}\n\nexport default Line;\n","import React, { useState } from 'react';\n\nimport Line from './Line';\n\nconst Lines = (props) => {\n    const {\n        data,\n        selectedTeam,\n        dataLineFunc,\n        updateSelectedTeam,\n    } = props;\n\n    return (\n        <g className=\"w=full h-full\" id=\"data-lines-wrapper\">\n            { data && data.map(({ team, games }) => (\n                <Line\n                    key={`line-${team}`}\n                    pathData={dataLineFunc(games)}\n                    selectedTeam={selectedTeam}\n                    team={team}\n                    updateSelectedTeam={updateSelectedTeam}\n                />\n            ))}\n        </g>\n    );\n}\n\nexport default Lines;\n","import React from 'react';\n\nimport { getStatAttribute } from '../utils'\n\nconst DataPoints = (props) => {\n    const {\n        data,\n        scaleX,\n        scaleY,\n        stat,\n    } = props;\n\n    return (\n        <g className=\"w-full h-full\" id=\"data-points-wrapper\">\n            {data && data.map((game) => (\n                <>\n                    <circle\n                        className=\"text-blue-400 cursor-pointer fill-current\"\n                        key={`game-${game.date}-outer`}\n                        cx={scaleX(new Date(game.date))}\n                        cy={scaleY(getStatAttribute(stat, game))}\n                        r={7}\n                    ></circle>\n\n                    <circle\n                        className=\"text-white cursor-pointer fill-current\"\n                        key={`game-${game.date}-inner`}\n                        cx={scaleX(new Date(game.date))}\n                        cy={scaleY(getStatAttribute(stat, game))}\n                        r={5}\n                    ></circle>\n\n                    { game.teamScore > game.opponentScore && (\n                        <circle\n                            className=\"animate-pulse text-blue-500 cursor-pointer fill-current\"\n                            key={`game-${game.date}-win`}\n                            cx={scaleX(new Date(game.date))}\n                            cy={scaleY(getStatAttribute(stat, game))}\n                            r={2}\n                        ></circle>\n                    )}\n                </>\n            ))}\n        </g>\n    )\n}\n\nexport default DataPoints;\n","import React, { useEffect, useRef, useState } from 'react';\nimport * as d3 from 'd3';\n\nimport { getMetricBounds, getStatAttribute } from '../utils';\nimport Lines from './Lines';\nimport DataPoints from './DataPoints';\n\nconst dimensions = {\n    height: 800,\n    margin: 64,\n}\n\nconst getChartBounds = (stat, bounds) => {\n    const getLower = val => 0.98 * Number(val);\n    const getUpper = val => 1.02 * Number(val);\n\n    switch (stat) {\n        case 'elo':\n            return [getLower(bounds.eloMin), getUpper(bounds.eloMax)];\n        case 'raptor':\n            return [getLower(bounds.raptorMin), getUpper(bounds.raptorMax)];\n        case 'score':\n            return [getLower(bounds.scoreMin), getUpper(bounds.scoreMax)];\n        default:\n            console.error('No bounds found for stat:', stat);\n            return [0, 0]\n    }\n}\n\nconst Chart = (props) => {\n    const {\n        data,\n        rawData,\n        selectedTeam,\n        stat,\n        updateSelectedTeam,\n    } = props;\n\n    const { height, margin } = dimensions;\n\n    const svgRef = useRef();\n\n    const [bounds, setBounds] = useState({});\n    const [width, setWidth] = useState();\n    const [displayData, setDisplayData] = useState();\n\n    const [scaleX, setScaleX] = useState(() => () => {});\n    const [scaleY, setScaleY] = useState(() => () => {});\n    const [dataLineFunc, setDataLineFunc] = useState(() => () => {});\n    const [selectedLineData, setSelectedLineData] = useState([]);\n\n    useEffect(() => {\n        if (svgRef && svgRef.current) {\n            setWidth(svgRef.current.parentElement.clientWidth - margin);\n        }\n    }, [svgRef, margin]);\n\n    useEffect(() => {\n        const newBounds = getMetricBounds(rawData);\n\n        setBounds(newBounds);\n    }, [rawData]);\n\n    useEffect(() => {\n        const svgEl = d3.select(svgRef.current);\n\n        // Get the root container\n        const newSvg = svgEl.select('#chart-wrapper')\n            .attr('transform', `translate(${margin}, ${margin})`);\n\n        // Add X grid lines with labels\n        const xScale = d3.scaleTime()\n            .domain(d3.extent(rawData, d => new Date(d.date)))\n            .range([0, width - margin]);\n        const xAxis = d3.axisBottom(xScale)\n            .ticks(d3.timeWeek, '\\'%y %b %d')\n            .tickSize(-height + margin);\n        newSvg.select('#x-axis').select('*').remove();\n        const xAxisGroup = newSvg.select('#x-axis')\n            .attr('transform', `translate(0, ${height - margin})`)\n            .call(xAxis);\n        xAxisGroup.select('.domain')\n            .attr('class', '');\n        xAxisGroup.selectAll('line')\n            .attr('class', 'text-gray-200');\n        xAxisGroup.selectAll('text')\n            .attr('class', 'text-base text-gray-500 transform -rotate-90 text-right')\n            .attr('y', -6)\n            .attr('x', -margin + 10);\n\n        // Add Y grid lines with labels\n        const yScale = d3.scaleLinear()\n            .domain(getChartBounds(stat, bounds))\n            .range([height - margin , 0]);\n        const yAxis = d3.axisLeft(yScale)\n            .ticks(5)\n            .tickPadding(20)\n            .tickSize(-width + margin);\n        newSvg.select('#y-axis').select('*').remove();\n        const yAxisGroup = newSvg.select('#y-axis')\n            .attr('transform', `translate(${margin}, 0})`)\n            .call(yAxis);\n        yAxisGroup.select('.domain').remove();\n        yAxisGroup.selectAll('line')\n            .attr('class', 'text-gray-200');\n        yAxisGroup.selectAll('text')\n            .attr('class', 'text-base text-gray-800');\n\n        const newDataLineFunc = d3.line()\n            .x(d => xScale(new Date(d.date)))\n            .y(d => yScale(getStatAttribute(stat, d)));\n\n        setScaleX(() => xScale);\n        setScaleY(() => yScale);\n        setDataLineFunc(() => newDataLineFunc);\n\n    }, [bounds, height, width, margin, rawData, stat]);\n\n    useEffect(() => {\n        if (data) {\n            const { orderedData, selectedTeamData } = Object.entries(data).reduce(({ selectedTeamData, orderedData }, teamData) => {\n                const [teamId, teamGames] = teamData;\n\n                if (teamId === selectedTeam) {\n                    return { selectedTeamData: { team: teamId, games: teamGames }, orderedData }\n                } else {\n                    return { selectedTeamData, orderedData: orderedData.concat({ team: teamId, games: teamGames }) }\n                }\n            }, { selectedTeamData: null, orderedData: [] });\n\n            setSelectedLineData(selectedTeamData);\n            setDisplayData([...orderedData, selectedTeamData]);\n        }\n    }, [data, selectedTeam]);\n\n    return (\n        <div className=\"max-w-screen-2xl w-full p-6 border rounded shadow\">\n            <h2>Chart</h2>\n\n            <svg\n                className=\"w-full transition-all ease-in-out\"\n                ref={svgRef}\n                width={width}\n                height={height + (2 * margin)}\n            >\n                <g id=\"chart-wrapper\">\n                    <g id=\"x-axis\" className=\"\"></g>\n                    <g id=\"y-axis\" className=\"\"></g>\n                    { displayData && (\n                        <g className=\"w-full h-full\">\n                            <Lines\n                                data={displayData}\n                                selectedTeam={selectedTeam}\n                                dataLineFunc={dataLineFunc}\n                                updateSelectedTeam={updateSelectedTeam}\n                            />\n\n                            <DataPoints\n                                data={selectedLineData.games}\n                                scaleX={scaleX}\n                                scaleY={scaleY}\n                                stat={stat}\n                            />\n                        </g>\n                    )}\n                </g>\n            </svg>\n        </div>\n    )\n}\n\nexport default Chart;\n","import React, { useEffect, useState } from 'react';\n\nimport Controls from './Controls';\nimport { teamNames } from '../constants';\nimport { getTeamMetricsForSeason } from '../utils';\nimport Chart from './Chart';\n\nconst Graph = (props) => {\n    const { data } = props;\n\n    // Controls State\n    const [selectedStat, setSelectedStat] = useState('elo');\n    const [selectedTeam, setSelectedTeam] = useState('MIL');\n    const [maxDate, setMaxDate] = useState('2021-01');\n\n    const [seasonByTeam, setSeasonByTeam] = useState();\n\n    useEffect(() => {\n        const byTeam = Object.keys(teamNames).reduce((acc, team) => {\n            const teamSeasonMetrics = getTeamMetricsForSeason(data, team, maxDate)\n            acc[team] = teamSeasonMetrics;\n\n            return acc;\n        }, {});\n\n        setSeasonByTeam(byTeam);\n    }, [data, maxDate]);\n\n    return (\n        <div className=\"flex flex-col items-center w-full px-8 space-y-8\">\n            <Controls\n                selectedStat={selectedStat}\n                selectedTeam={selectedTeam}\n                maxDate={maxDate}\n                updateSelectedStat={setSelectedStat}\n                updateSelectedTeam={setSelectedTeam}\n                updateMaxDate={setMaxDate}\n            />\n\n            <Chart\n                data={seasonByTeam}\n                rawData={data}\n                stat={selectedStat}\n                selectedTeam={selectedTeam}\n                updateSelectedTeam={(newTeam) => setSelectedTeam(newTeam)}\n            />\n        </div>\n    );\n}\n\nexport default Graph;\n","import React, { useState, useEffect } from 'react';\nimport { csv } from 'd3';\n\nimport Header from './components/Header';\nimport Nav from './components/Nav';\nimport { NBA_ELO_CSV, NBA_ELO_LATEST_CSV } from './constants';\n\nimport Graph from './components/Graph';\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [error, setError] = useState();\n\n  const getData = async (file) => {\n    const latestEloData = await csv(file);\n\n    setData(latestEloData);\n  }\n\n  useEffect(() => {\n    try {\n      getData(NBA_ELO_LATEST_CSV);\n    } catch (e) {\n      console.error(e);\n      setError(e);\n    }\n  }, []);\n\n  return (\n    <main className=\"w-full\">\n      <Header />\n      <Nav />\n      <section className=\"\">\n        { error && (\n          <div>There was an error loading the data</div>\n        )}\n\n        {!error && data.length && (\n          <Graph data={data} />\n        )}\n      </section>\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}