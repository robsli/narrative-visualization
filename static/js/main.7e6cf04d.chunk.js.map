{"version":3,"sources":["components/Header.js","components/Nav.js","constants.js","components/Controls.js","components/Chart.js","utils.js","components/Graph.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","className","Nav","teamNames","teamSelectOptions","Object","entries","map","value","label","statSelectOptions","Controls","selectedStat","selectedTeam","updateSelectedStat","updateSelectedTeam","id","onChange","target","team","dimensions","Chart","data","rawData","stat","svgRef","useRef","useState","bounds","setBounds","useEffect","newBounds","reduce","acc","game","elo1_pre","elo2_pre","elo1_post","elo2_post","raptor1_pre","raptor2_pre","score1","score2","eloMin","Math","min","eloMax","max","raptorMin","raptorMax","scoreMin","scoreMax","getMetricBounds","console","log","height","width","margins","xScale","d3","domain","d","Date","date","range","yScale","error","getChartBounds","svgEl","current","selectAll","remove","svg","append","attr","xAxis","ticks","tickSize","yAxis","call","ref","Graph","setSelectedStat","setSelectedTeam","seasonByTeam","setSeasonByTeam","byTeam","keys","teamSeasonMetrics","teamAbbrev","season","team1","gameStats","playoff","teamScore","teamPreElo","teamPostElo","teamPreRaptor","teamRaptorProb","raptor_prob1","opponent","team2","opponentScore","opponentPreElo","opponentPostElo","opponentPreRaptor","opponentRaptorProb","raptor_prob2","concat","getTeamMetricsForSeason","App","setData","setError","getData","file","a","csv","latestEloData","e","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7e6cf04d.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = (props) => {\n    return (\n        <header\n            className=\"w-full px-3 py-2\"\n        >\n            Header\n        </header>\n    )\n}\n\nexport default Header;\n","import React from 'react';\n\nconst Nav = (props) => {\n    return (\n        <nav></nav>\n    )\n}\n\nexport default Nav;\n","const NBA_ELO_CSV = 'https://projects.fivethirtyeight.com/nba-model/nba_elo.csv';\nconst NBA_ELO_LATEST_CSV = 'https://projects.fivethirtyeight.com/nba-model/nba_elo_latest.csv';\n\nconst teamNames = {\n    'ATL': 'Atlanta Hawks',\n    'BRK': 'Brooklyn Nets',\n    'BOS': 'Boston Celtics',\n    'CHO': 'Charlotte Hornets',\n    'CHI': 'Chicago Bulls',\n    'CLE': 'Cleveland Cavaliers',\n    'DAL': 'Dallas Mavericks',\n    'DEN': 'Denver Nuggets',\n    'DET': 'Detroit Pistons',\n    'GSW': 'Golden State Warriors',\n    'HOU': 'Houston Rockets',\n    'IND': 'Indiana Pacers',\n    'LAC': 'Los Angeles Clippers',\n    'LAL': 'Los Angeles Lakers',\n    'MEM': 'Memphis Grizzlies',\n    'MIA': 'Miami Heat',\n    'MIL': 'Milwaukee Bucks',\n    'MIN': 'Minnesota Timberwolves',\n    'NOP': 'New Orleans Pelicans',\n    'NYK': 'New York Knicks',\n    'OKC': 'Oklahoma City Thunder',\n    'ORL': 'Orlando Magic',\n    'PHI': 'Philadelphia 76ers',\n    'PHO': 'Phoenix Suns',\n    'POR': 'Portland Trail Blazers',\n    'SAC': 'Sacramento Kings',\n    'SAS': 'San Antonio Spurs',\n    'TOR': 'Toronto Raptors',\n    'UTA': 'Utah Jazz',\n    'WAS': 'Washington Wizards',\n};\n\nconst teamSelectOptions = Object.entries(teamNames).map(([id, fullName]) => (\n    { value: id, label: fullName }\n))\n\nconst statSelectOptions = [\n    { value: 'elo', label: 'ELO' },\n    { value: 'raptor', label: 'Raptor' },\n    { value: 'score', label: 'Score' },\n];\n\nexport {\n    NBA_ELO_CSV,\n    NBA_ELO_LATEST_CSV,\n    statSelectOptions,\n    teamNames,\n    teamSelectOptions,\n}\n","import React, { useEffect, useState } from'react';\n\nimport { statSelectOptions, teamSelectOptions } from '../constants';\n\nconst Controls = (props) => {\n    const {\n        selectedStat,\n        selectedTeam,\n        updateSelectedStat,\n        updateSelectedTeam,\n    } = props;\n\n    return (\n        <div className=\"flex-nowrap flex space-x-4\">\n            <label className=\"flex flex-col space-y-2\">\n                <span className=\"text-sm font-medium text-gray-500 uppercase\">Team</span>\n                <select\n                    id=\"team-select\"\n                    className=\"px-3 py-2 leading-tight text-gray-800 border rounded shadow\"\n                    onChange={({ target }) => updateSelectedTeam(target.value)}\n                    value={selectedTeam}\n                >\n                    <option value='all'>All</option>\n                    { teamSelectOptions.map((team) => (\n                        <option key={team.value} value={team.value}>{team.label}</option>\n                    ))}\n                </select>\n            </label>\n\n            <label className=\"flex flex-col space-y-2\">\n                <span className=\"text-sm font-medium text-gray-500 uppercase\">Statistic</span>\n                <select\n                    id=\"statistic-select\"\n                    className=\"px-3 py-2 leading-tight text-gray-800 border rounded shadow\"\n                    onChange={({ target }) => updateSelectedStat(target.value)}\n                    value={selectedStat}\n                >\n                    { statSelectOptions.map((team) => (\n                        <option key={team.value} value={team.value}>{team.label}</option>\n                    ))}\n                </select>\n            </label>\n        </div>\n    );\n}\n\nexport default Controls;\n","import React, { useEffect, useRef, useState } from 'react';\nimport * as d3 from 'd3';\n\nimport { getMetricBounds } from '../utils';\n\nconst dimensions = {\n    width: 800,\n    height: 800,\n    margins: 64,\n}\n\nconst getChartBounds = (stat, bounds) => {\n    switch (stat) {\n        case 'elo':\n            return [bounds.eloMin, bounds.eloMax];\n        case 'raptor':\n            return [bounds.raptorMin, bounds.raptorMax];\n        case 'score':\n            return [bounds.scoreMin, bounds.scoreMax];\n        default:\n            console.error('No bounds found for stat:', stat);\n            return [0, 0]\n    }\n}\n\nconst Chart = (props) => {\n    const {\n        data,\n        rawData,\n        stat,\n    } = props;\n\n    const svgRef = useRef();\n\n    const [bounds, setBounds] = useState({});\n\n    useEffect(() => {\n        const newBounds = getMetricBounds(rawData);\n        console.log('bounds:', newBounds);\n\n        setBounds(newBounds);\n    }, [rawData, stat])\n\n    useEffect(() => {\n        const { height, width, margins } = dimensions;\n\n        const xScale = d3.scaleTime()\n            .domain(d3.extent(rawData, d => new Date(d.date)))\n            .range([0, width]);\n\n        const yScale = d3.scaleLinear()\n            .domain(getChartBounds(stat, bounds))\n            .range([height, 0]);\n\n        console.log('xScale:', xScale);\n        console.log('yScale:', yScale);\n\n        const svgEl = d3.select(svgRef.current);\n        svgEl.selectAll('*').remove();\n\n        // Create root container\n        const svg = svgEl\n            .append('g')\n            .attr('transform', `translate(${margins}, ${margins})`);\n\n        // Add X grid lines with labels\n        const xAxis = d3.axisBottom(xScale)\n            .ticks(5)\n            .tickSize(-height + margins);\n        const xAxisGroup = svg.append('g')\n            .attr('transform', `translate(0, ${height - margins})`)\n            .call(xAxis);\n        // xAxisGroup.select('.domain').remove();\n        // xAxisGroup.selectAll('line').attr('stroke', 'rgba(255, 255, 255, 0.2)');\n        // xAxisGroup.selectAll(\"text\")\n        //     .attr(\"opacity\", 0.5)\n        //     .attr(\"color\", \"black\")\n        //     .attr(\"font-size\", \"0.75rem\");\n\n        // Add Y grid lines with labels\n        const yAxis = d3.axisLeft(yScale)\n            .ticks(5)\n            .tickSize(-width)\n        const yAxisGroup = svg.append('g').call(yAxis);\n\n    }, [bounds, data, rawData]);\n\n    return (\n        <div className=\"w-full max-w-6xl p-6 border rounded shadow\">\n            Chart\n\n            <svg\n                className=\"\"\n                ref={svgRef}\n                width={dimensions.width + (2 * dimensions.margins)}\n                height={dimensions.height + (2 * dimensions.margins)}\n            ></svg>\n        </div>\n    )\n}\n\nexport default Chart;\n","const getTeamMetricsForSeason = (data, teamAbbrev, season = '2021') => {\n    return data.reduce((acc, game) => {\n        if (game.season !== season) {\n            return acc;\n        }\n\n        if (game.team1 === teamAbbrev) {\n            const gameStats = {\n                date: game.date,\n                playoff: game.playoff,\n                teamScore: game.score1,\n                teamPreElo: game.elo1_pre,\n                teamPostElo: game.elo1_post,\n                teamPreRaptor: game.raptor1_pre,\n                teamRaptorProb: game.raptor_prob1,\n                opponent: game.team2,\n                opponentScore: game.score2,\n                opponentPreElo: game.elo2_pre,\n                opponentPostElo: game.elo2_post,\n                opponentPreRaptor: game.raptor2_pre,\n                opponentRaptorProb: game.raptor_prob2,\n            }\n\n            return acc.concat(gameStats);\n        }\n\n        if (game.team2 === teamAbbrev) {\n            const gameStats = {\n                date: game.date,\n                playoff: game.playoff,\n                teamScore: game.score2,\n                teamPreElo: game.elo2_pre,\n                teamPostElo: game.elo2_post,\n                teamPreRaptor: game.raptor2_pre,\n                teamRaptorProb: game.raptor_prob2,\n                opponent: game.team1,\n                opponentScore: game.score1,\n                opponentPreElo: game.elo1_pre,\n                opponentPostElo: game.elo1_post,\n                opponentPreRaptor: game.raptor1_pre,\n                opponentRaptorProb: game.raptor_prob1,\n            }\n\n            return acc.concat(gameStats);\n        }\n\n        return acc;\n    }, [])\n}\n\nconst getMetricBounds = (rawData) => {\n    return rawData.reduce((acc, game) => {\n        const {\n            elo1_pre,\n            elo2_pre,\n            elo1_post,\n            elo2_post,\n            raptor1_pre,\n            raptor2_pre,\n            score1,\n            score2\n        } = game;\n\n        return {\n            eloMin: Math.min(acc.eloMin, elo1_pre, elo2_pre, elo1_post, elo2_post),\n            eloMax: Math.max(acc.eloMax, elo1_pre, elo2_pre, elo1_post, elo2_post),\n            raptorMin: Math.min(acc.raptorMin, raptor1_pre, raptor2_pre),\n            raptorMax: Math.max(acc.raptorMax, raptor1_pre, raptor2_pre),\n            scoreMin: Math.min(acc.scoreMin, score1, score2),\n            scoreMax: Math.max(acc.scoreMax, score1, score2),\n        }\n    }, {\n        eloMin: 99999,\n        eloMax: 0,\n        raptorMin: 99999,\n        raptorMax: 0,\n        scoreMin: 99999,\n        scoreMax: 0,\n    })\n}\n\nconst getTeamMetricBounds = (rawData) => {\n    return rawData.reduce((acc, game) => {\n        const {\n            teamPreElo,\n            teamPostElo,\n            teamPreRaptor,\n            teamScore,\n        } = game;\n\n        return {\n            eloMin: Math.min(acc.eloMin, teamPreElo, teamPostElo),\n            eloMax: Math.max(acc.eloMax, teamPreElo, teamPostElo),\n            raptorMin: Math.min(acc.raptorMin, teamPreRaptor),\n            raptorMax: Math.max(acc.raptorMax, teamPreRaptor),\n            scoreMin: Math.min(acc.scoreMin, teamScore),\n            scoreMax: Math.max(acc.scoreMax, teamScore),\n        }\n    }, {\n        eloMin: 99999,\n        eloMax: 0,\n        raptorMin: 99999,\n        raptorMax: 0,\n        scoreMin: 99999,\n        scoreMax: 0,\n    })\n}\n\nexport {\n    getMetricBounds,\n    getTeamMetricBounds,\n    getTeamMetricsForSeason,\n}\n","import React, { useEffect, useState } from 'react';\n\nimport Controls from './Controls';\nimport { teamNames } from '../constants';\nimport { getTeamMetricsForSeason } from '../utils';\nimport Chart from './Chart';\n\nconst Graph = (props) => {\n    const { data } = props;\n\n    const [selectedStat, setSelectedStat] = useState('elo');\n    const [selectedTeam, setSelectedTeam] = useState('MIL');\n\n    const [seasonByTeam, setSeasonByTeam] = useState();\n\n    useEffect(() => {\n        const byTeam = Object.keys(teamNames).reduce((acc, team) => {\n            const teamSeasonMetrics = getTeamMetricsForSeason(data, team)\n            acc[team] = teamSeasonMetrics;\n\n            return acc;\n        }, {});\n\n        setSeasonByTeam(byTeam);\n    }, [data]);\n\n    return (\n        <div className=\"flex flex-col items-center w-full px-8 space-y-8\">\n            <Controls\n                selectedStat={selectedStat}\n                selectedTeam={selectedTeam}\n                updateSelectedStat={setSelectedStat}\n                updateSelectedTeam={setSelectedTeam}\n            />\n\n            <Chart\n                data={seasonByTeam}\n                rawData={data}\n                stat={selectedStat}\n            />\n        </div>\n    );\n}\n\nexport default Graph;\n","import React, { useState, useEffect } from 'react';\nimport { csv } from 'd3';\n\nimport Header from './components/Header';\nimport Nav from './components/Nav';\nimport { NBA_ELO_CSV, NBA_ELO_LATEST_CSV } from './constants';\n\nimport Graph from './components/Graph';\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [error, setError] = useState();\n\n  const getData = async (file) => {\n    const latestEloData = await csv(file);\n    console.log('latestEloData:', latestEloData);\n\n    setData(latestEloData);\n  }\n\n  useEffect(() => {\n    try {\n      getData(NBA_ELO_LATEST_CSV);\n    } catch (e) {\n      console.error(e);\n      setError(e);\n    }\n  }, []);\n\n  return (\n    <main className=\"w-full\">\n      <Header />\n      <Nav />\n      <section className=\"\">\n        { error && (\n          <div>There was an error loading the data</div>\n        )}\n\n        {!error && data.length && (\n          <Graph data={data} />\n        )}\n      </section>\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}