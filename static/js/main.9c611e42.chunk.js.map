{"version":3,"sources":["components/Header.js","components/Nav.js","constants.js","components/Controls.js","utils.js","components/Line.js","components/DataPoints.js","components/Chart.js","components/Graph.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","className","Nav","teamNames","teamSelectOptions","Object","entries","map","value","label","statSelectOptions","Controls","selectedStat","selectedTeam","updateSelectedStat","updateSelectedTeam","id","onChange","target","team","getStatAttribute","stat","datum","teamPreElo","teamPreRaptor","teamScore","console","error","Line","isSelected","pathData","useState","isHovering","setIsHovering","fill","d","strokeWidth","onClick","onMouseOver","onMouseLeave","DataPoints","data","scaleX","scaleY","game","cx","Date","date","cy","r","dimensions","Chart","rawData","height","margin","svgRef","useRef","bounds","setBounds","width","setWidth","displayData","setDisplayData","setScaleX","setScaleY","dataLineFunc","setDataLineFunc","selectedLineData","setSelectedLineData","useEffect","current","parentElement","clientWidth","newBounds","reduce","acc","elo1_pre","elo2_pre","elo1_post","elo2_post","raptor1_pre","raptor2_pre","score1","score2","eloMin","Math","min","eloMax","max","raptorMin","raptorMax","scoreMin","scoreMax","getMetricBounds","log","newSvg","d3","select","attr","xScale","domain","range","xAxis","ticks","tickSize","remove","xAxisGroup","call","selectAll","yScale","getLower","val","Number","getUpper","getChartBounds","yAxis","yAxisGroup","newDataLineFunc","x","y","teamData","selectedTeamData","orderedData","teamId","teamGames","games","concat","ref","Graph","setSelectedStat","setSelectedTeam","seasonByTeam","setSeasonByTeam","byTeam","keys","teamSeasonMetrics","teamAbbrev","season","lastGame","length","wins","loses","team1","gameStats","playoff","teamPostElo","teamRaptorProb","raptor_prob1","opponent","team2","opponentScore","opponentPreElo","opponentPostElo","opponentPreRaptor","opponentRaptorProb","raptor_prob2","getTeamMetricsForSeason","App","setData","setError","getData","file","a","csv","latestEloData","e","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9c611e42.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = (props) => {\n    return (\n        <header\n            className=\"w-full px-3 py-2\"\n        >\n            Header\n        </header>\n    )\n}\n\nexport default Header;\n","import React from 'react';\n\nconst Nav = (props) => {\n    return (\n        <nav></nav>\n    )\n}\n\nexport default Nav;\n","const NBA_ELO_CSV = 'https://projects.fivethirtyeight.com/nba-model/nba_elo.csv';\nconst NBA_ELO_LATEST_CSV = 'https://projects.fivethirtyeight.com/nba-model/nba_elo_latest.csv';\n\nconst teamNames = {\n    'ATL': 'Atlanta Hawks',\n    'BRK': 'Brooklyn Nets',\n    'BOS': 'Boston Celtics',\n    'CHO': 'Charlotte Hornets',\n    'CHI': 'Chicago Bulls',\n    'CLE': 'Cleveland Cavaliers',\n    'DAL': 'Dallas Mavericks',\n    'DEN': 'Denver Nuggets',\n    'DET': 'Detroit Pistons',\n    'GSW': 'Golden State Warriors',\n    'HOU': 'Houston Rockets',\n    'IND': 'Indiana Pacers',\n    'LAC': 'Los Angeles Clippers',\n    'LAL': 'Los Angeles Lakers',\n    'MEM': 'Memphis Grizzlies',\n    'MIA': 'Miami Heat',\n    'MIL': 'Milwaukee Bucks',\n    'MIN': 'Minnesota Timberwolves',\n    'NOP': 'New Orleans Pelicans',\n    'NYK': 'New York Knicks',\n    'OKC': 'Oklahoma City Thunder',\n    'ORL': 'Orlando Magic',\n    'PHI': 'Philadelphia 76ers',\n    'PHO': 'Phoenix Suns',\n    'POR': 'Portland Trail Blazers',\n    'SAC': 'Sacramento Kings',\n    'SAS': 'San Antonio Spurs',\n    'TOR': 'Toronto Raptors',\n    'UTA': 'Utah Jazz',\n    'WAS': 'Washington Wizards',\n};\n\nconst teamSelectOptions = Object.entries(teamNames).map(([id, fullName]) => (\n    { value: id, label: fullName }\n))\n\nconst statSelectOptions = [\n    { value: 'elo', label: 'ELO' },\n    { value: 'raptor', label: 'Raptor' },\n    { value: 'score', label: 'Score' },\n];\n\nconst months = {\n    0: 'January',\n    1: 'February',\n    2: 'March',\n    3: 'April',\n    4: 'May',\n    5: 'June',\n    6: 'July',\n    7: 'August',\n    8: 'September',\n    9: 'October',\n    10: 'November',\n    11: 'December'\n}\n\nexport {\n    months,\n    NBA_ELO_CSV,\n    NBA_ELO_LATEST_CSV,\n    statSelectOptions,\n    teamNames,\n    teamSelectOptions,\n}\n","import React, { useEffect, useState } from'react';\n\nimport { statSelectOptions, teamSelectOptions } from '../constants';\n\nconst Controls = (props) => {\n    const {\n        selectedStat,\n        selectedTeam,\n        updateSelectedStat,\n        updateSelectedTeam,\n    } = props;\n\n    return (\n        <div className=\"flex-nowrap flex space-x-4\">\n            <label className=\"flex flex-col space-y-2\">\n                <span className=\"text-sm font-medium text-gray-500 uppercase\">Team</span>\n                <select\n                    id=\"team-select\"\n                    className=\"px-3 py-2 leading-tight text-gray-800 border rounded shadow\"\n                    onChange={({ target }) => updateSelectedTeam(target.value)}\n                    value={selectedTeam}\n                >\n                    <option value='all'>All</option>\n                    { teamSelectOptions.map((team) => (\n                        <option key={team.value} value={team.value}>{team.label}</option>\n                    ))}\n                </select>\n            </label>\n\n            <label className=\"flex flex-col space-y-2\">\n                <span className=\"text-sm font-medium text-gray-500 uppercase\">Statistic</span>\n                <select\n                    id=\"statistic-select\"\n                    className=\"px-3 py-2 leading-tight text-gray-800 border rounded shadow\"\n                    onChange={({ target }) => updateSelectedStat(target.value)}\n                    value={selectedStat}\n                >\n                    { statSelectOptions.map((team) => (\n                        <option key={team.value} value={team.value}>{team.label}</option>\n                    ))}\n                </select>\n            </label>\n        </div>\n    );\n}\n\nexport default Controls;\n","const getTeamMetricsForSeason = (data, teamAbbrev, season = '2021') => {\n    return data.reduce((acc, game) => {\n        if (game.season !== season) {\n            return acc;\n        }\n\n        const lastGame = acc[acc.length - 1] || { wins: 0, loses: 0 };\n\n        if (game.team1 === teamAbbrev) {\n            const gameStats = {\n                date: game.date,\n                playoff: game.playoff,\n                teamScore: game.score1,\n                teamPreElo: game.elo1_pre,\n                teamPostElo: game.elo1_post,\n                teamPreRaptor: game.raptor1_pre,\n                teamRaptorProb: game.raptor_prob1,\n                opponent: game.team2,\n                opponentScore: game.score2,\n                opponentPreElo: game.elo2_pre,\n                opponentPostElo: game.elo2_post,\n                opponentPreRaptor: game.raptor2_pre,\n                opponentRaptorProb: game.raptor_prob2,\n                wins: game.score1 > game.score2 ? lastGame.wins + 1 : lastGame.wins,\n                loses: game.score1 < game.score2 ? lastGame.loses + 1 : lastGame.loses,\n            }\n\n            return acc.concat(gameStats);\n        }\n\n        if (game.team2 === teamAbbrev) {\n            const gameStats = {\n                date: game.date,\n                playoff: game.playoff,\n                teamScore: game.score2,\n                teamPreElo: game.elo2_pre,\n                teamPostElo: game.elo2_post,\n                teamPreRaptor: game.raptor2_pre,\n                teamRaptorProb: game.raptor_prob2,\n                opponent: game.team1,\n                opponentScore: game.score1,\n                opponentPreElo: game.elo1_pre,\n                opponentPostElo: game.elo1_post,\n                opponentPreRaptor: game.raptor1_pre,\n                opponentRaptorProb: game.raptor_prob1,\n                wins: game.score2 > game.score1 ? lastGame.wins + 1 : lastGame.wins,\n                loses: game.score2 < game.score1 ? lastGame.loses + 1 : lastGame.loses,\n            }\n\n            return acc.concat(gameStats);\n        }\n\n        return acc;\n    }, [])\n}\n\nconst getMetricBounds = (rawData) => {\n    return rawData.reduce((acc, game) => {\n        const {\n            elo1_pre,\n            elo2_pre,\n            elo1_post,\n            elo2_post,\n            raptor1_pre,\n            raptor2_pre,\n            score1,\n            score2\n        } = game;\n\n        return {\n            eloMin: Math.min(acc.eloMin, elo1_pre, elo2_pre, elo1_post, elo2_post),\n            eloMax: Math.max(acc.eloMax, elo1_pre, elo2_pre, elo1_post, elo2_post),\n            raptorMin: Math.min(acc.raptorMin, raptor1_pre, raptor2_pre),\n            raptorMax: Math.max(acc.raptorMax, raptor1_pre, raptor2_pre),\n            scoreMin: Math.min(acc.scoreMin, score1, score2),\n            scoreMax: Math.max(acc.scoreMax, score1, score2),\n        }\n    }, {\n        eloMin: 99999,\n        eloMax: 0,\n        raptorMin: 99999,\n        raptorMax: 0,\n        scoreMin: 99999,\n        scoreMax: 0,\n    })\n}\n\nconst getTeamMetricBounds = (rawData) => {\n    return rawData.reduce((acc, game) => {\n        const {\n            teamPreElo,\n            teamPostElo,\n            teamPreRaptor,\n            teamScore,\n        } = game;\n\n        return {\n            eloMin: Math.min(acc.eloMin, teamPreElo, teamPostElo),\n            eloMax: Math.max(acc.eloMax, teamPreElo, teamPostElo),\n            raptorMin: Math.min(acc.raptorMin, teamPreRaptor),\n            raptorMax: Math.max(acc.raptorMax, teamPreRaptor),\n            scoreMin: Math.min(acc.scoreMin, teamScore),\n            scoreMax: Math.max(acc.scoreMax, teamScore),\n        }\n    }, {\n        eloMin: 99999,\n        eloMax: 0,\n        raptorMin: 99999,\n        raptorMax: 0,\n        scoreMin: 99999,\n        scoreMax: 0,\n    })\n}\n\nconst getStatAttribute = (stat, datum) => {\n    switch (stat) {\n        case 'elo':\n            return datum.teamPreElo;\n        case 'raptor':\n            return datum.teamPreRaptor;\n        case 'score':\n            return datum.teamScore;\n        default:\n            console.error('Unrecognized statistic category:', stat);\n            return null\n    }\n}\n\nexport {\n    getMetricBounds,\n    getStatAttribute,\n    getTeamMetricBounds,\n    getTeamMetricsForSeason,\n}\n","import React, { useState } from 'react';\n\nconst Line = (props) => {\n    const {\n        isSelected,\n        pathData,\n        selectedTeam,\n        updateSelectedTeam,\n    } = props;\n\n    const [isHovering, setIsHovering] = useState(false);\n\n    return (\n        <path\n            fill=\"none\"\n            className={`\n                stroke-current cursor-pointer\n                ${isSelected\n                    ? 'text-gray-700'\n                    : isHovering\n                        ? 'text-blue-600'\n                        : 'text-gray-300'}\n            `}\n            d={pathData}\n            strokeWidth={isSelected ? 8 : 3}\n            onClick={() => updateSelectedTeam(selectedTeam)}\n            onMouseOver={() => setIsHovering(true)}\n            onMouseLeave={() => setIsHovering(false)}\n        ></path>\n    )\n}\n\nexport default Line;\n","import React from 'react';\n\nimport { getStatAttribute } from '../utils'\n\nconst DataPoints = (props) => {\n    const {\n        data,\n        scaleX,\n        scaleY,\n        stat,\n    } = props;\n\n    return (\n        <g className=\"w-full h-full\">\n            {data && data.map((game) => (\n                <circle\n                    className=\"text-red-200 cursor-pointer fill-current\"\n                    key={`game-${game.date}`}\n                    cx={scaleX(new Date(game.date))}\n                    cy={scaleY(getStatAttribute(stat, game))}\n                    r={4}\n                ></circle>\n            ))}\n        </g>\n    )\n}\n\nexport default DataPoints;\n","import React, { useEffect, useRef, useState } from 'react';\nimport * as d3 from 'd3';\n\nimport { getMetricBounds, getStatAttribute } from '../utils';\nimport Line from './Line';\nimport DataPoints from './DataPoints';\n\nconst dimensions = {\n    height: 800,\n    margin: 64,\n}\n\nconst getChartBounds = (stat, bounds) => {\n    const getLower = val => 0.95 * Number(val);\n    const getUpper = val => 1.05 * Number(val);\n\n    switch (stat) {\n        case 'elo':\n            return [getLower(bounds.eloMin), getUpper(bounds.eloMax)];\n        case 'raptor':\n            return [getLower(bounds.raptorMin), getUpper(bounds.raptorMax)];\n        case 'score':\n            return [getLower(bounds.scoreMin), getUpper(bounds.scoreMax)];\n        default:\n            console.error('No bounds found for stat:', stat);\n            return [0, 0]\n    }\n}\n\nconst Chart = (props) => {\n    const {\n        data,\n        rawData,\n        selectedTeam,\n        stat,\n        updateSelectedTeam,\n    } = props;\n\n    const { height, margin } = dimensions;\n\n    const svgRef = useRef();\n\n    const [bounds, setBounds] = useState({});\n    const [width, setWidth] = useState();\n    const [displayData, setDisplayData] = useState();\n\n    const [scaleX, setScaleX] = useState(() => () => {});\n    const [scaleY, setScaleY] = useState(() => () => {});\n    const [dataLineFunc, setDataLineFunc] = useState(() => () => {});\n    const [selectedLineData, setSelectedLineData] = useState([]);\n\n    useEffect(() => {\n        if (svgRef && svgRef.current) {\n            setWidth(svgRef.current.parentElement.clientWidth - margin);\n        }\n    }, [svgRef, margin]);\n\n    useEffect(() => {\n        const newBounds = getMetricBounds(rawData);\n        console.log('bounds:', newBounds);\n\n        setBounds(newBounds);\n    }, [rawData]);\n\n    useEffect(() => {\n        const svgEl = d3.select(svgRef.current);\n\n        // Get the root container\n        const newSvg = svgEl.select('#chart-wrapper')\n            .attr('transform', `translate(${margin}, ${margin})`);\n\n        // Add X grid lines with labels\n        const xScale = d3.scaleTime()\n            .domain(d3.extent(rawData, d => new Date(d.date)))\n            .range([0, width]);\n        const xAxis = d3.axisBottom(xScale)\n            .ticks(12)\n            .tickSize(-height);\n        newSvg.select('#x-axis').select('*').remove();\n        const xAxisGroup = newSvg.select('#x-axis')\n            .attr('transform', `translate(0, ${height})`)\n            .call(xAxis);\n        xAxisGroup.select('.domain')\n            .attr('class', '');\n        xAxisGroup.selectAll('line')\n            .attr('class', 'text-gray-200');\n        xAxisGroup.selectAll('text')\n            .attr('class', 'font-md text-blue-500');\n\n        // Add Y grid lines with labels\n        const yScale = d3.scaleLinear()\n            .domain(getChartBounds(stat, bounds))\n            .range([height, 0]);\n        const yAxis = d3.axisLeft(yScale)\n            .ticks(5)\n            .tickSize(-width)\n        newSvg.select('#y-axis').select('*').remove();\n        const yAxisGroup = newSvg.select('#y-axis').call(yAxis);\n        yAxisGroup.select('.domain').remove();\n        yAxisGroup.selectAll('line')\n            .attr('class', 'text-gray-200');\n        yAxisGroup.selectAll('text')\n            .attr('class', 'font-md text-gray-800');\n\n        const newDataLineFunc = d3.line()\n            .x(d => xScale(new Date(d.date)))\n            .y(d => yScale(getStatAttribute(stat, d)));\n\n        setScaleX(() => xScale);\n        setScaleY(() => yScale);\n        setDataLineFunc(() => newDataLineFunc);\n\n    }, [bounds, height, width, margin, rawData, stat]);\n\n    useEffect(() => {\n        if (data) {\n            const { orderedData, selectedTeamData } = Object.entries(data).reduce(({ selectedTeamData, orderedData }, teamData) => {\n                const [teamId, teamGames] = teamData;\n\n                if (teamId === selectedTeam) {\n                    return { selectedTeamData: { team: teamId, games: teamGames }, orderedData }\n                } else {\n                    return { selectedTeamData, orderedData: orderedData.concat({ team: teamId, games: teamGames }) }\n                }\n            }, { selectedTeamData: null, orderedData: [] });\n\n            setSelectedLineData(selectedTeamData);\n            setDisplayData([...orderedData, selectedTeamData]);\n        }\n    }, [data, selectedTeam]);\n\n    return (\n        <div className=\"max-w-screen-2xl w-full p-6 border rounded shadow\">\n            <h2>Chart</h2>\n\n            <svg\n                className=\"w-full\"\n                ref={svgRef}\n                width={width}\n                height={height + (2 * margin)}\n            >\n                <g id=\"chart-wrapper\">\n                    <g id=\"x-axis\"></g>\n                    <g id=\"y-axis\"></g>\n                    <g className=\"w-full h-full\">\n                        { displayData && displayData.map(({ team, games }) => (\n                            <Line\n                                key={`line-${team}`}\n                                isSelected={team === selectedTeam}\n                                pathData={dataLineFunc(games)}\n                                selectedTeam={selectedTeam}\n                                updateSelectedTeam={updateSelectedTeam}\n                            />\n                        ))}\n\n                        { displayData && (\n                            <DataPoints\n                                data={selectedLineData.games}\n                                scaleX={scaleX}\n                                scaleY={scaleY}\n                                stat={stat}\n                            />\n                        )}\n                    </g>\n                </g>\n            </svg>\n        </div>\n    )\n}\n\nexport default Chart;\n","import React, { useEffect, useState } from 'react';\n\nimport Controls from './Controls';\nimport { teamNames } from '../constants';\nimport { getTeamMetricsForSeason } from '../utils';\nimport Chart from './Chart';\n\nconst Graph = (props) => {\n    const { data } = props;\n\n    const [selectedStat, setSelectedStat] = useState('elo');\n    const [selectedTeam, setSelectedTeam] = useState('MIL');\n\n    const [seasonByTeam, setSeasonByTeam] = useState();\n\n    useEffect(() => {\n        const byTeam = Object.keys(teamNames).reduce((acc, team) => {\n            const teamSeasonMetrics = getTeamMetricsForSeason(data, team)\n            acc[team] = teamSeasonMetrics;\n\n            return acc;\n        }, {});\n\n        setSeasonByTeam(byTeam);\n    }, [data]);\n\n    return (\n        <div className=\"flex flex-col items-center w-full px-8 space-y-8\">\n            <Controls\n                selectedStat={selectedStat}\n                selectedTeam={selectedTeam}\n                updateSelectedStat={setSelectedStat}\n                updateSelectedTeam={setSelectedTeam}\n            />\n\n            <Chart\n                data={seasonByTeam}\n                rawData={data}\n                stat={selectedStat}\n                selectedTeam={selectedTeam}\n                updateSelectedTeam={setSelectedTeam}\n            />\n        </div>\n    );\n}\n\nexport default Graph;\n","import React, { useState, useEffect } from 'react';\nimport { csv } from 'd3';\n\nimport Header from './components/Header';\nimport Nav from './components/Nav';\nimport { NBA_ELO_CSV, NBA_ELO_LATEST_CSV } from './constants';\n\nimport Graph from './components/Graph';\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [error, setError] = useState();\n\n  const getData = async (file) => {\n    const latestEloData = await csv(file);\n    console.log('latestEloData:', latestEloData);\n\n    setData(latestEloData);\n  }\n\n  useEffect(() => {\n    try {\n      getData(NBA_ELO_LATEST_CSV);\n    } catch (e) {\n      console.error(e);\n      setError(e);\n    }\n  }, []);\n\n  return (\n    <main className=\"w-full\">\n      <Header />\n      <Nav />\n      <section className=\"\">\n        { error && (\n          <div>There was an error loading the data</div>\n        )}\n\n        {!error && data.length && (\n          <Graph data={data} />\n        )}\n      </section>\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}