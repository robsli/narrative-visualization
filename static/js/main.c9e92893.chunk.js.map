{"version":3,"sources":["components/Header.js","components/Nav.js","constants.js","utils.js","components/Line.js","components/Lines.js","components/Annotation.js","components/DataPoint.js","components/DataPoints.js","components/Chart.js","components/Controls.js","components/Legend.js","components/Graph.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","className","Nav","teamNames","teamSelectOptions","Object","entries","map","value","label","statSelectOptions","monthNames","maxDateOptions","playoffOrder","playoffIdentifiers","getStatAttribute","stat","datum","teamPreElo","teamPreRaptor","teamScore","console","error","getMonthLabel","date","newDate","Date","year","getFullYear","month","getUTCMonth","Line","pathData","selectedTeam","team","updateSelectedTeam","isSelected","useState","isHovering","setIsHovering","labelX","setLabelX","labelY","setLabelY","useEffect","pathDataPoints","split","length","x","y","Number","fill","trim","d","strokeWidth","onClick","onMouseOver","onMouseLeave","transform","Lines","data","dataLineFunc","id","games","Annotation","chartHeight","chartWidth","gameData","gRef","useRef","dx","dy","Math","max","min","opponent","opponentScore","wins","losses","wonGame","annotations","note","title","bgPadding","color","makeAnnotations","annotation","editMode","type","annotationLabel","current","d3","call","ref","DataPoint","scaleX","scaleY","onMouseEnter","cx","cy","r","DataPoints","game","dimensions","Chart","narrationMode","rawData","showOnlyPlayoffs","height","margin","svgRef","bounds","setBounds","width","setWidth","displayData","setDisplayData","setScaleX","setScaleY","setDataLineFunc","selectedLineData","setSelectedLineData","parentElement","clientWidth","newBounds","reduce","acc","elo1_pre","elo2_pre","elo1_post","elo2_post","raptor1_pre","raptor2_pre","score1","score2","eloMin","eloMax","raptorMin","raptorMax","scoreMin","scoreMax","getMetricBounds","newSvg","select","attr","dateRangeData","filter","playoff","xDomain","lastDate","setDate","getDate","xScale","domain","range","xAxis","ticks","tickSize","remove","xAxisGroup","selectAll","yScale","getLower","val","getUpper","getChartBounds","yAxis","tickPadding","yAxisGroup","newDataLineFunc","gameWithHighestPostElo","values","highestEloGame","lastGame","teamPostElo","teamData","selectedTeamData","orderedData","teamId","teamGames","concat","Controls","maxDate","playoffRound","selectedStat","updateMaxDate","updateNarrationMode","updatePlayoffRound","updateSelectedStat","updateShowOnlyPlayoffs","onChange","target","disabled","indexOf","prevMonthIndex","option","nextMonthIndex","Legend","Graph","setNarrationMode","setSelectedStat","setSelectedTeam","setMaxDate","setShowOnlyPlayoffs","setPlayoffRound","seasonByTeam","setSeasonByTeam","byTeam","keys","teamSeasonMetrics","teamAbbrev","endingMonth","season","team1","gameStats","teamRaptorProb","raptor_prob1","team2","opponentPreElo","opponentPostElo","opponentPreRaptor","opponentRaptorProb","raptor_prob2","getTeamMetricsForSeason","showPlayoffs","newTeam","App","setData","setError","getData","file","a","csv","latestEloData","e","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c9e92893.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = (props) => {\n    return (\n        <header\n            className=\"max-w-screen-2xl md:mb-12 w-full py-2 mx-auto mb-8 space-y-8 text-center\"\n        >\n            <h1 className=\"md:text-3xl lg:text-4xl text-xl\">2021 National Basketball Association Metrics</h1>\n\n            <section className=\"p-8 mx-auto space-y-4 border rounded shadow\">\n                TODO: Cite data source\n                TODO: key\n            </section>\n        </header>\n    )\n}\n\nexport default Header;\n","import React from 'react';\n\nconst Nav = (props) => {\n    return (\n        <nav></nav>\n    )\n}\n\nexport default Nav;\n","const NBA_ELO_CSV = 'https://projects.fivethirtyeight.com/nba-model/nba_elo.csv';\nconst NBA_ELO_LATEST_CSV = 'https://projects.fivethirtyeight.com/nba-model/nba_elo_latest.csv';\n\nconst teamNames = {\n    'ATL': 'Atlanta Hawks',\n    'BRK': 'Brooklyn Nets',\n    'BOS': 'Boston Celtics',\n    'CHO': 'Charlotte Hornets',\n    'CHI': 'Chicago Bulls',\n    'CLE': 'Cleveland Cavaliers',\n    'DAL': 'Dallas Mavericks',\n    'DEN': 'Denver Nuggets',\n    'DET': 'Detroit Pistons',\n    'GSW': 'Golden State Warriors',\n    'HOU': 'Houston Rockets',\n    'IND': 'Indiana Pacers',\n    'LAC': 'Los Angeles Clippers',\n    'LAL': 'Los Angeles Lakers',\n    'MEM': 'Memphis Grizzlies',\n    'MIA': 'Miami Heat',\n    'MIL': 'Milwaukee Bucks',\n    'MIN': 'Minnesota Timberwolves',\n    'NOP': 'New Orleans Pelicans',\n    'NYK': 'New York Knicks',\n    'OKC': 'Oklahoma City Thunder',\n    'ORL': 'Orlando Magic',\n    'PHI': 'Philadelphia 76ers',\n    'PHO': 'Phoenix Suns',\n    'POR': 'Portland Trail Blazers',\n    'SAC': 'Sacramento Kings',\n    'SAS': 'San Antonio Spurs',\n    'TOR': 'Toronto Raptors',\n    'UTA': 'Utah Jazz',\n    'WAS': 'Washington Wizards',\n};\n\nconst teamSelectOptions = Object.entries(teamNames).map(([id, fullName]) => (\n    { value: id, label: fullName }\n))\n\nconst statSelectOptions = [\n    { value: 'elo', label: 'ELO' },\n    { value: 'raptor', label: 'Raptor' },\n    { value: 'score', label: 'Score' },\n];\n\nconst monthNames = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December'\n];\n\nconst maxDateOptions = [\n    '2021-01',\n    '2021-02',\n    '2021-03',\n    '2021-04',\n    '2021-05',\n    '2021-06',\n    '2021-07',\n    '2021-08',\n];\n\nconst playoffOrder = ['p', 'q', 's', 'c', 'f'];\nconst playoffIdentifiers = {\n    'p': 'Play-In',\n    'q': 'Quarter Finals',\n    's': 'Semi Finals',\n    'c': 'Conference Finals',\n    'f': 'Finals'\n}\n\nexport {\n    monthNames,\n    NBA_ELO_CSV,\n    NBA_ELO_LATEST_CSV,\n    playoffIdentifiers,\n    playoffOrder,\n    statSelectOptions,\n    teamNames,\n    teamSelectOptions,\n    maxDateOptions,\n}\n","import { monthNames, playoffOrder } from './constants';\n\nconst getTeamMetricsForSeason = (\n    data,\n    teamAbbrev,\n    endingMonth = null,\n    showOnlyPlayoffs = false,\n    playoffRound = null,\n    season = '2021'\n) => {\n    return data.reduce((acc, game) => {\n        if (game.season !== season) {\n            return acc;\n        }\n\n        if (showOnlyPlayoffs\n            && (!game.playoff\n                || playoffOrder.indexOf(game.playoff) > playoffOrder.indexOf(playoffRound)\n            )\n        ) {\n            return acc;\n        }\n\n        if (!showOnlyPlayoffs && endingMonth && !!endingMonth) {\n            // ex. 2021-01\n            const endDate = new Date(endingMonth);\n            const gameDate = new Date(game.date);\n\n            if (endDate < gameDate) {\n                return acc;\n            }\n        }\n\n        const lastGame = acc.length > 0\n            ? acc[acc.length - 1]\n            : { wins: 0, losses: 0 };\n\n        if (game.team1 === teamAbbrev) {\n            const teamScore = Number(game.score1);\n            const opponentScore = Number(game.score2);\n\n            const gameStats = {\n                date: game.date,\n                playoff: game.playoff,\n                team: game.team1,\n                teamScore,\n                teamPreElo: game.elo1_pre,\n                teamPostElo: game.elo1_post,\n                teamPreRaptor: game.raptor1_pre,\n                teamRaptorProb: game.raptor_prob1,\n                opponent: game.team2,\n                opponentScore,\n                opponentPreElo: game.elo2_pre,\n                opponentPostElo: game.elo2_post,\n                opponentPreRaptor: game.raptor2_pre,\n                opponentRaptorProb: game.raptor_prob2,\n                wins: teamScore > opponentScore ? lastGame.wins + 1 : lastGame.wins,\n                losses: teamScore < opponentScore ? lastGame.losses + 1 : lastGame.losses,\n            }\n\n            return acc.concat(gameStats);\n        }\n\n        if (game.team2 === teamAbbrev) {\n            const teamScore = Number(game.score2);\n            const opponentScore = Number(game.score1);\n\n            const gameStats = {\n                date: game.date,\n                playoff: game.playoff,\n                team: game.team2,\n                teamScore,\n                teamPreElo: game.elo2_pre,\n                teamPostElo: game.elo2_post,\n                teamPreRaptor: game.raptor2_pre,\n                teamRaptorProb: game.raptor_prob2,\n                opponent: game.team1,\n                opponentScore,\n                opponentPreElo: game.elo1_pre,\n                opponentPostElo: game.elo1_post,\n                opponentPreRaptor: game.raptor1_pre,\n                opponentRaptorProb: game.raptor_prob1,\n                wins: teamScore > opponentScore ? lastGame.wins + 1 : lastGame.wins,\n                losses: teamScore < opponentScore ? lastGame.losses + 1 : lastGame.losses,\n            }\n\n            return acc.concat(gameStats);\n        }\n\n        return acc;\n    }, [])\n}\n\nconst getMetricBounds = (rawData) => {\n    return rawData.reduce((acc, game) => {\n        const {\n            elo1_pre,\n            elo2_pre,\n            elo1_post,\n            elo2_post,\n            raptor1_pre,\n            raptor2_pre,\n            score1,\n            score2\n        } = game;\n\n        return {\n            eloMin: Math.min(acc.eloMin, elo1_pre, elo2_pre, elo1_post, elo2_post),\n            eloMax: Math.max(acc.eloMax, elo1_pre, elo2_pre, elo1_post, elo2_post),\n            raptorMin: Math.min(acc.raptorMin, raptor1_pre, raptor2_pre),\n            raptorMax: Math.max(acc.raptorMax, raptor1_pre, raptor2_pre),\n            scoreMin: Math.min(acc.scoreMin, score1, score2),\n            scoreMax: Math.max(acc.scoreMax, score1, score2),\n        }\n    }, {\n        eloMin: 99999,\n        eloMax: 0,\n        raptorMin: 99999,\n        raptorMax: 0,\n        scoreMin: 99999,\n        scoreMax: 0,\n    })\n}\n\nconst getTeamMetricBounds = (rawData) => {\n    return rawData.reduce((acc, game) => {\n        const {\n            teamPreElo,\n            teamPostElo,\n            teamPreRaptor,\n            teamScore,\n        } = game;\n\n        return {\n            eloMin: Math.min(acc.eloMin, teamPreElo, teamPostElo),\n            eloMax: Math.max(acc.eloMax, teamPreElo, teamPostElo),\n            raptorMin: Math.min(acc.raptorMin, teamPreRaptor),\n            raptorMax: Math.max(acc.raptorMax, teamPreRaptor),\n            scoreMin: Math.min(acc.scoreMin, teamScore),\n            scoreMax: Math.max(acc.scoreMax, teamScore),\n        }\n    }, {\n        eloMin: 99999,\n        eloMax: 0,\n        raptorMin: 99999,\n        raptorMax: 0,\n        scoreMin: 99999,\n        scoreMax: 0,\n    })\n}\n\nconst getStatAttribute = (stat, datum) => {\n    switch (stat) {\n        case 'elo':\n            return datum.teamPreElo;\n        case 'raptor':\n            return datum.teamPreRaptor;\n        case 'score':\n            return datum.teamScore;\n        default:\n            console.error('Unrecognized statistic category:', stat);\n            return null\n    }\n}\n\nconst getMonthLabel = (date) => {\n    const newDate = new Date(date);\n\n    const year = newDate.getFullYear();\n    const month = monthNames[newDate.getUTCMonth()];\n\n    return `${month} ${year}`\n}\n\nexport {\n    getMetricBounds,\n    getMonthLabel,\n    getStatAttribute,\n    getTeamMetricBounds,\n    getTeamMetricsForSeason,\n}\n","import React, { useEffect, useState } from 'react';\n\nconst Line = (props) => {\n    const {\n        pathData,\n        selectedTeam,\n        team,\n        updateSelectedTeam,\n    } = props;\n\n    const isSelected = team === selectedTeam;\n\n    const [isHovering, setIsHovering] = useState(false);\n\n    const [labelX, setLabelX] = useState();\n    const [labelY, setLabelY] = useState();\n\n    useEffect(() => {\n        if ((isSelected || isHovering)) {\n            const pathDataPoints = pathData.split('L');\n            const [x, y] = pathDataPoints[pathDataPoints.length - 1].split(',');\n\n            setLabelX(Number(x) + 12);\n            setLabelY(Number(y) + 6);\n        }\n    }, [isHovering, isSelected, pathData]);\n\n    return (\n        <>\n            <path\n                fill=\"none\"\n                className={`\n                    stroke-current cursor-pointer\n                    transition-all ease-in-out\n                    ${isSelected\n                        ? 'text-gray-600'\n                        : isHovering\n                            ? 'text-purple-500'\n                            : 'text-gray-200'}\n                `.trim()}\n                d={pathData}\n                strokeWidth={isSelected || isHovering ? 6 : 2}\n                onClick={() => updateSelectedTeam(team)}\n                onMouseOver={() => setIsHovering(true)}\n                onMouseLeave={() => setIsHovering(false)}\n            ></path>\n\n            {(isSelected || isHovering)\n                && labelX && labelY && (\n                    <text\n                        className={`\n                            text-base\n                            ${isSelected ? 'text-black' : 'text-purple-800'}\n                        `.trim()}\n                        transform={`translate(${labelX}, ${labelY})`}\n                    >{team}</text>\n                )\n            }\n        </>\n    )\n}\n\nexport default Line;\n","import React from 'react';\n\nimport Line from './Line';\n\nconst Lines = (props) => {\n    const {\n        data,\n        selectedTeam,\n        dataLineFunc,\n        updateSelectedTeam,\n    } = props;\n\n    return (\n        <g className=\"w-full h-full\" id=\"data-lines-wrapper\">\n            { data && data.map(({ team, games }) => (\n                games && games.length && (\n                    <Line\n                        key={`line-${team}`}\n                        pathData={dataLineFunc(games)}\n                        selectedTeam={selectedTeam}\n                        team={team}\n                        updateSelectedTeam={updateSelectedTeam}\n                    />\n                )\n            ))}\n        </g>\n    );\n}\n\nexport default Lines;\n","import React, { useEffect, useRef, useState } from 'react';\n\nimport * as d3 from 'd3';\nimport { annotationLabel, annotation } from 'd3-svg-annotation';\n\nconst Annotation = (props) => {\n    const {\n        chartHeight,\n        chartWidth,\n        x,\n        y,\n        gameData,\n    } = props;\n\n    const gRef = useRef();\n\n    const dx = (x + 200) < chartWidth\n        ? 50\n        : -50;\n    const dy = y < (chartHeight / 2)\n        ? Math.max(-100, - y + 40)\n        : Math.min(100, chartHeight - y - 20);\n\n    const { team, teamScore, opponent, opponentScore, wins, losses } = gameData || {};\n    const wonGame = teamScore > opponentScore;\n    const label = wonGame\n        ? `${team} improves to ${wins} - ${losses}`\n        : `${team} slides to ${wins} - ${losses}`\n\n    const annotations = [{\n        x, y, dy, dx,\n        note: {\n            label,\n            title: `${wonGame ? 'WIN against' : 'LOSS to'} ${opponent} (${teamScore} - ${opponentScore})`,\n            bgPadding: 20,\n        },\n        color: wonGame ? '#10B981' : '#EF4444',\n    }]\n\n    const makeAnnotations = annotation()\n        .editMode(true)\n        .type(annotationLabel)\n        .annotations(annotations);\n\n    useEffect(() => {\n        if (gRef && gRef.current) {\n            d3.select(gRef.current).call(makeAnnotations);\n        }\n    }, [makeAnnotations, gRef]);\n\n    return (\n        <g\n            id=\"annotations-wrapper\" className=\"annotation-group\"\n            ref={gRef}\n        />\n    );\n}\n\nexport default Annotation;\n","import React, { useState } from 'react';\n\nimport { getStatAttribute } from '../utils';\nimport Annotation from './Annotation';\n\nconst DataPoint = (props) => {\n    const {\n        chartHeight,\n        chartWidth,\n        gameData,\n        scaleX,\n        scaleY,\n        stat,\n    } = props;\n\n    const x = scaleX(new Date(gameData.date));\n    const y = scaleY(getStatAttribute(stat, gameData));\n\n    const [isHovering, setIsHovering] = useState(false);\n\n    const wonGame = gameData.teamScore > gameData.opponentScore;\n\n    return (\n        <g\n            onMouseEnter={() => setIsHovering(true)}\n            onMouseLeave={() => setIsHovering(false)}\n        >\n            {isHovering && (\n                <Annotation\n                    chartHeight={chartHeight}\n                    chartWidth={chartWidth}\n                    x={x}\n                    y={y}\n                    gameData={gameData}\n                />\n            )}\n\n            <circle\n                className={`${wonGame ? 'text-green-500' : 'text-red-500'} cursor-pointer fill-current animate-pulse`}\n                cx={x}\n                cy={y}\n                r={7}\n            ></circle>\n\n            <circle\n                className=\"text-white cursor-pointer fill-current\"\n                cx={x}\n                cy={y}\n                r={5}\n            ></circle>\n\n            { gameData.teamScore > gameData.opponentScore && (\n                <circle\n                    className={`${wonGame ? 'text-green-500' : 'text-red-500'} animate-pulse cursor-pointer fill-current`}\n                    cx={x}\n                    cy={y}\n                    r={3}\n                ></circle>\n            )}\n        </g>\n    )\n}\n\nexport default DataPoint;\n","import React from 'react';\n\nimport DataPoint from './DataPoint';\n\nconst DataPoints = (props) => {\n    const {\n        chartHeight,\n        chartWidth,\n        data,\n        scaleX,\n        scaleY,\n        stat,\n    } = props;\n\n    return (\n        <g className=\"w-full h-full\" id=\"data-points-wrapper\">\n            {data && data.map((game) => (\n                <DataPoint\n                    key={`game-data-${game.date}`}\n                    chartHeight={chartHeight}\n                    chartWidth={chartWidth}\n                    gameData={game}\n                    scaleX={scaleX}\n                    scaleY={scaleY}\n                    stat={stat}\n                />\n            ))}\n        </g>\n    )\n}\n\nexport default DataPoints;\n","import React, { useEffect, useRef, useState } from 'react';\nimport * as d3 from 'd3';\n\nimport { getMetricBounds, getStatAttribute } from '../utils';\nimport Lines from './Lines';\nimport DataPoints from './DataPoints';\n\nconst dimensions = {\n    height: 800,\n    margin: 64,\n}\n\nconst getChartBounds = (stat, bounds) => {\n    const getLower = val => 0.98 * Number(val);\n    const getUpper = val => 1.02 * Number(val);\n\n    switch (stat) {\n        case 'elo':\n            return [getLower(bounds.eloMin), getUpper(bounds.eloMax)];\n        case 'raptor':\n            return [getLower(bounds.raptorMin), getUpper(bounds.raptorMax)];\n        case 'score':\n            return [getLower(bounds.scoreMin), getUpper(bounds.scoreMax)];\n        default:\n            console.error('No bounds found for stat:', stat);\n            return [0, 0]\n    }\n}\n\nconst Chart = (props) => {\n    const {\n        data,\n        narrationMode,\n        rawData,\n        selectedTeam,\n        showOnlyPlayoffs,\n        stat,\n        updateSelectedTeam,\n    } = props;\n\n    const { height, margin } = dimensions;\n\n    const svgRef = useRef();\n\n    const [bounds, setBounds] = useState({});\n    const [width, setWidth] = useState();\n    const [displayData, setDisplayData] = useState();\n\n    const [scaleX, setScaleX] = useState(() => () => {});\n    const [scaleY, setScaleY] = useState(() => () => {});\n    const [dataLineFunc, setDataLineFunc] = useState(() => () => {});\n    const [selectedLineData, setSelectedLineData] = useState([]);\n\n    useEffect(() => {\n        if (svgRef && svgRef.current) {\n            setWidth(svgRef.current.parentElement.clientWidth - margin);\n        }\n    }, [svgRef, margin]);\n\n    useEffect(() => {\n        const newBounds = getMetricBounds(rawData);\n\n        setBounds(newBounds);\n    }, [rawData]);\n\n    useEffect(() => {\n        const svgEl = d3.select(svgRef.current);\n\n        // Get the root container\n        const newSvg = svgEl.select('#chart-wrapper')\n            .attr('transform', `translate(${margin}, 0)`);\n\n        // Add X grid lines with labels\n        const dateRangeData = showOnlyPlayoffs\n            ? rawData.filter(game => !!game.playoff)\n            : rawData;\n        const xDomain = d3.extent(dateRangeData, d => new Date(d.date));\n        const lastDate = xDomain[1].setDate(xDomain[1].getDate() + 10);\n        const xScale = d3.scaleTime()\n            .domain([xDomain[0], lastDate])\n            .range([0, width - margin]);\n        const xAxis = d3.axisBottom(xScale)\n            .ticks(d3.timeWeek, '\\'%y %b %d')\n            .tickSize(-height + margin);\n        newSvg.select('#x-axis').select('*').remove();\n        const xAxisGroup = newSvg.select('#x-axis')\n            .attr('transform', `translate(0, ${height - margin})`)\n            .call(xAxis);\n        xAxisGroup.select('.domain')\n            .attr('class', '');\n        xAxisGroup.selectAll('line')\n            .attr('class', 'text-gray-200');\n        xAxisGroup.selectAll('text')\n            .attr('class', 'text-base text-gray-500 transform -rotate-90 text-right')\n            .attr('y', -6)\n            .attr('x', -margin + 10);\n\n        // Add Y grid lines with labels\n        const yScale = d3.scaleLinear()\n            .domain(getChartBounds(stat, bounds))\n            .range([height - margin , 0]);\n        const yAxis = d3.axisLeft(yScale)\n            .ticks(5)\n            .tickPadding(20)\n            .tickSize(-width + margin);\n        newSvg.select('#y-axis').select('*').remove();\n        const yAxisGroup = newSvg.select('#y-axis').call(yAxis);\n        yAxisGroup.select('.domain').remove();\n        yAxisGroup.selectAll('line')\n            .attr('class', 'text-gray-200');\n        yAxisGroup.selectAll('text')\n            .attr('class', 'text-base text-gray-800');\n\n        const newDataLineFunc = d3.line()\n            .x(d => xScale(new Date(d.date)))\n            .y(d => yScale(getStatAttribute(stat, d)));\n\n        setScaleX(() => xScale);\n        setScaleY(() => yScale);\n        setDataLineFunc(() => newDataLineFunc);\n\n    }, [bounds, height, width, margin, rawData, stat, showOnlyPlayoffs]);\n\n    useEffect(() => {\n        if (narrationMode && data) {\n            const gameWithHighestPostElo = Object.values(data).reduce((highestEloGame, games) => {\n                const lastGame = games[games.length - 1];\n\n                return Number(lastGame.teamPostElo) > Number(highestEloGame.teamPostElo)\n                    ? lastGame\n                    : highestEloGame;\n            }, { teamPostElo: 0 });\n\n            if (gameWithHighestPostElo && gameWithHighestPostElo.team) {\n                updateSelectedTeam(gameWithHighestPostElo.team);\n            }\n        }\n    }, [narrationMode, data, updateSelectedTeam])\n\n    useEffect(() => {\n        if (data) {\n            const { orderedData, selectedTeamData } = Object.entries(data).reduce(({ selectedTeamData, orderedData }, teamData) => {\n                const [teamId, teamGames] = teamData;\n\n                if (teamId === selectedTeam) {\n                    return { selectedTeamData: { team: teamId, games: teamGames }, orderedData }\n                } else {\n                    return { selectedTeamData, orderedData: orderedData.concat({ team: teamId, games: teamGames }) }\n                }\n            }, { selectedTeamData: null, orderedData: [] });\n\n            setSelectedLineData(selectedTeamData);\n            setDisplayData([...orderedData, selectedTeamData].filter(d => d));\n        }\n    }, [data, selectedTeam, narrationMode]);\n\n    return (\n        <svg\n            className=\"w-full transition-all ease-in-out\"\n            ref={svgRef}\n            width={width}\n            height={height + margin}\n        >\n            <g id=\"chart-wrapper\">\n                <g id=\"x-axis\" className=\"\"></g>\n                <g id=\"y-axis\" className=\"\"></g>\n                { displayData && (\n                    <g className=\"w-full h-full\">\n                        <Lines\n                            data={displayData}\n                            selectedTeam={selectedTeam}\n                            dataLineFunc={dataLineFunc}\n                            updateSelectedTeam={updateSelectedTeam}\n                        />\n\n                        {selectedLineData && (\n                            <DataPoints\n                                chartHeight={height}\n                                chartWidth={width}\n                                data={selectedLineData.games}\n                                scaleX={scaleX}\n                                scaleY={scaleY}\n                                stat={stat}\n                            />\n                        )}\n                    </g>\n                )}\n            </g>\n        </svg>\n    )\n}\n\nexport default Chart;\n","import React from 'react';\n\nimport { statSelectOptions, teamSelectOptions, maxDateOptions } from '../constants';\n\nimport { getMonthLabel } from '../utils';\nimport { playoffOrder, playoffIdentifiers } from '../constants';\n\nconst Controls = (props) => {\n    const {\n        maxDate,\n        narrationMode,\n        playoffRound,\n        selectedStat,\n        selectedTeam,\n        showOnlyPlayoffs,\n        updateMaxDate,\n        updateNarrationMode,\n        updatePlayoffRound,\n        updateSelectedStat,\n        updateSelectedTeam,\n        updateShowOnlyPlayoffs,\n    } = props;\n\n    const nextMonth = () => {\n        const nextMonthIndex = maxDateOptions.indexOf(maxDate) + 1;\n\n        updateMaxDate(maxDateOptions[nextMonthIndex]);\n    }\n\n    const prevMonth = () => {\n        const prevMonthIndex = maxDateOptions.indexOf(maxDate) - 1;\n\n        updateMaxDate(maxDateOptions[prevMonthIndex]);\n    }\n\n    const prevRound = () => {\n        updatePlayoffRound(playoffOrder[playoffOrder.indexOf(playoffRound) - 1])\n    }\n\n    const nextRound = () => {\n        updatePlayoffRound(playoffOrder[playoffOrder.indexOf(playoffRound) + 1])\n    }\n\n    return (\n        <div className=\"flex-nowrap flex items-end justify-start w-full px-16 space-x-12\">\n            <label className=\"flex flex-col space-y-2\">\n                <span className=\"text-sm font-medium text-gray-500 uppercase\">Visualization Mode</span>\n                <button\n                    className=\"nowrap flex overflow-hidden leading-tight text-gray-800 border rounded-full shadow\"\n                    onClick={() => updateNarrationMode(!narrationMode)}\n                >\n                    <span className={`block px-3 py-2 ${narrationMode ? 'text-white bg-green-500' : 'bg-gray-100 text-gray-400'}`}>Narrative</span>\n                    <span className={`block px-3 py-2 ${narrationMode ? 'bg-gray-100 text-gray-400' : 'text-white bg-green-500'}`}>Exploratory</span>\n                </button>\n            </label>\n\n            <label className=\"flex flex-col space-y-2\">\n                <span className=\"text-sm font-medium text-gray-500 uppercase\">Show Only Playoffs</span>\n                <button\n                    className={`\n                        nowrap flex items-center w-16 p-1 overflow-hidden border rounded-full shadow-md\n                        ${showOnlyPlayoffs ? 'bg-green-500' : 'bg-gray-100'}\n                    `}\n                    onClick={() => updateShowOnlyPlayoffs(!showOnlyPlayoffs)}\n                >\n                    <div className={`block w-7 h-7 rounded-full border-2\n                        ${showOnlyPlayoffs ? 'ml-auto border-white bg-white' : 'mr-auto bg-gray-50 border-gray-400'}\n                    `}></div>\n                </button>\n            </label>\n\n            <div className=\"flex-nowrap flex space-x-4\">\n                <label className=\"flex flex-col space-y-2\">\n                    <span className=\"text-sm font-medium text-gray-500 uppercase\">Statistic</span>\n                    <select\n                        id=\"statistic-select\"\n                        className=\"px-3 py-2 leading-tight text-gray-800 border rounded shadow\"\n                        onChange={({ target }) => updateSelectedStat(target.value)}\n                        value={selectedStat}\n                    >\n                        { statSelectOptions.map((team) => (\n                            <option key={team.value} value={team.value}>{team.label}</option>\n                        ))}\n                    </select>\n                </label>\n\n                <label className=\"flex flex-col space-y-2\">\n                    <span className=\"text-sm font-medium text-gray-500 uppercase\">Team</span>\n                    <select\n                        id=\"team-select\"\n                        className=\"px-3 py-2 leading-tight text-gray-800 border rounded shadow\"\n                        onChange={({ target }) => updateSelectedTeam(target.value)}\n                        value={selectedTeam}\n                    >\n                        <option value=''>All</option>\n                        { teamSelectOptions.map((team) => (\n                            <option key={team.value} value={team.value}>{team.label}</option>\n                        ))}\n                    </select>\n                </label>\n            </div>\n\n            {/* Normal Season Date Selector */}\n            { !showOnlyPlayoffs && (\n                <div className=\"flex-nowrap flex items-end ml-8 space-x-2\">\n                    <button\n                        className=\"disabled:cursor-not-allowed disabled:text-gray-200 h-max-content px-3 py-2 leading-tight text-gray-800 border rounded shadow\"\n                        disabled={maxDateOptions.indexOf(maxDate) <= 0}\n                        onClick={prevMonth}\n                    >{`<`}</button>\n                    <label className=\"flex flex-col space-y-2\">\n                        <span className=\"text-sm font-medium text-gray-500 uppercase\">Max Date</span>\n                        <select\n                            id=\"statistic-select\"\n                            className=\"px-3 py-2 leading-tight text-gray-800 border rounded shadow\"\n                            onChange={({ target }) => updateMaxDate(target.value)}\n                            value={maxDate}\n                        >\n                            <option key=\"all-option\" value={maxDateOptions[maxDateOptions.length - 1]}>All</option>\n                            { maxDateOptions.map((option) => (\n                                <option key={option} value={option}>{getMonthLabel(option)}</option>\n                            ))}\n                        </select>\n                    </label>\n                    <button\n                        className=\"disabled:text-gray-200 disabled:cursor-not-allowed h-max-content px-3 py-2 leading-tight text-gray-800 border rounded shadow\"\n                        disabled={!maxDate || maxDateOptions.indexOf(maxDate) >= maxDateOptions.length - 1}\n                        onClick={nextMonth}\n                    >{`>`}</button>\n                </div>\n            )}\n\n            {/* Playoff Selector */}\n            { showOnlyPlayoffs && (\n                <div className=\"flex-nowrap flex items-end ml-8 space-x-2\">\n                    <button\n                        className=\"disabled:cursor-not-allowed disabled:text-gray-200 h-max-content px-3 py-2 leading-tight text-gray-800 border rounded shadow\"\n                        disabled={playoffOrder.indexOf(playoffRound) < 1}\n                        onClick={prevRound}\n                    >{`<`}</button>\n                    <label className=\"flex flex-col space-y-2\">\n                        <span className=\"text-sm font-medium text-gray-500 uppercase\">Playoff Round</span>\n                        <select\n                            id=\"statistic-select\"\n                            className=\"px-3 py-2 leading-tight text-gray-800 border rounded shadow\"\n                            onChange={({ target }) => updatePlayoffRound(target.value)}\n                            value={playoffRound}\n                        >\n                            { playoffOrder.map((option) => (\n                                <option key={option} value={option}>{playoffIdentifiers[option]}</option>\n                            ))}\n                        </select>\n                    </label>\n                    <button\n                        className=\"disabled:text-gray-200 disabled:cursor-not-allowed h-max-content px-3 py-2 leading-tight text-gray-800 border rounded shadow\"\n                        disabled={playoffOrder.indexOf(playoffRound) >= playoffOrder.length - 1}\n                        onClick={nextRound}\n                    >{`>`}</button>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default Controls;\n","import React from 'react';\n\nconst Legend = () => (\n    <div className=\"flex justify-center w-full py-3\">\n        <div className=\"flex-nowrap flex space-x-4\">\n            <div className=\"flex items-center space-x-1\">\n                <div className=\"flex items-center justify-center w-3.5 h-3.5 border-2 border-green-500 rounded-full animate-pulse\">\n                    <div className=\"animate-pulse w-1.5 h-1.5 bg-green-500 rounded-full\"></div>\n                </div>\n                <span>Win</span>\n            </div>\n\n            <div className=\"flex items-center space-x-1\">\n                <div className=\"flex items-center justify-center w-3.5 h-3.5 border-2 border-red-500 rounded-full\">\n                </div>\n                <span>Loss</span>\n            </div>\n        </div>\n    </div>\n)\n\nexport default Legend;\n","import React, { useEffect, useState } from 'react';\n\nimport { teamNames } from '../constants';\nimport { getTeamMetricsForSeason } from '../utils';\nimport Chart from './Chart';\nimport Controls from './Controls';\nimport Legend from './Legend';\n\nconst Graph = (props) => {\n    const { data } = props;\n\n    // Controls State\n    const [narrationMode, setNarrationMode] = useState(true);\n    const [selectedStat, setSelectedStat] = useState('elo');\n    const [selectedTeam, setSelectedTeam] = useState('MIL');\n    const [maxDate, setMaxDate] = useState('2021-01');\n    const [showOnlyPlayoffs, setShowOnlyPlayoffs] = useState(false);\n    const [playoffRound, setPlayoffRound] = useState();\n\n    const [seasonByTeam, setSeasonByTeam] = useState();\n\n    const updatePlayoffControls = (showPlayoffs) => {\n        setShowOnlyPlayoffs(showPlayoffs);\n        if (showPlayoffs) {\n            setPlayoffRound('p');\n        } else {\n            setPlayoffRound(null);\n        }\n    }\n\n    useEffect(() => {\n        const byTeam = Object.keys(teamNames).reduce((acc, team) => {\n            const teamSeasonMetrics = getTeamMetricsForSeason(data, team, maxDate, showOnlyPlayoffs, playoffRound)\n            acc[team] = teamSeasonMetrics;\n\n            return acc;\n        }, {});\n\n        setSeasonByTeam(byTeam);\n    }, [data, maxDate, showOnlyPlayoffs, playoffRound]);\n\n    return (\n        <div className=\"max-w-screen-2xl flex flex-col items-center w-full p-8 mx-auto space-y-4 border rounded shadow\">\n            {/* <h2 className=\"text-lg\">Chart</h2> */}\n\n            <Controls\n                maxDate={maxDate}\n                narrationMode={narrationMode}\n                playoffRound={playoffRound}\n                selectedStat={selectedStat}\n                selectedTeam={selectedTeam}\n                showOnlyPlayoffs={showOnlyPlayoffs}\n                updateMaxDate={setMaxDate}\n                updateNarrationMode={setNarrationMode}\n                updatePlayoffRound={setPlayoffRound}\n                updateSelectedStat={setSelectedStat}\n                updateSelectedTeam={setSelectedTeam}\n                updateShowOnlyPlayoffs={updatePlayoffControls}\n            />\n\n            <Legend />\n\n            <Chart\n                data={seasonByTeam}\n                narrationMode={narrationMode}\n                rawData={data}\n                showOnlyPlayoffs={showOnlyPlayoffs}\n                stat={selectedStat}\n                selectedTeam={selectedTeam}\n                updateSelectedTeam={(newTeam) => setSelectedTeam(newTeam)}\n            />\n        </div>\n    );\n}\n\nexport default Graph;\n","import React, { useState, useEffect } from 'react';\nimport { csv } from 'd3';\n\nimport Header from './components/Header';\nimport Nav from './components/Nav';\nimport { NBA_ELO_CSV, NBA_ELO_LATEST_CSV } from './constants';\n\nimport Graph from './components/Graph';\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [error, setError] = useState();\n\n  const getData = async (file) => {\n    const latestEloData = await csv(file);\n\n    setData(latestEloData);\n  }\n\n  useEffect(() => {\n    try {\n      getData(NBA_ELO_LATEST_CSV);\n    } catch (e) {\n      console.error(e);\n      setError(e);\n    }\n  }, []);\n\n  return (\n    <main className=\"md:px-4 lg:px-8 w-full px-2 pb-8 mx-auto\">\n      <Header />\n      <Nav />\n      <section className=\"\">\n        { error && (\n          <div>There was an error loading the data</div>\n        )}\n\n        {!error && data.length && (\n          <Graph data={data} />\n        )}\n      </section>\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}